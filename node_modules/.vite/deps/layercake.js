import "./chunk-X7HCJ7ZS.js";
import {
  linear,
  sqrt
} from "./chunk-ITH3SDQ6.js";
import {
  stack_default
} from "./chunk-4Z52MJIV.js";
import {
  bin
} from "./chunk-GOLXE563.js";
import {
  rgb
} from "./chunk-Z7RSOWDO.js";
import "./chunk-DKNDEOWF.js";
import {
  derived,
  writable
} from "./chunk-4RFHEICT.js";
import {
  SvelteComponentDev,
  add_iframe_resize_listener,
  add_location,
  add_render_callback,
  append_hydration_dev,
  append_styles,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_element,
  claim_space,
  claim_svg_element,
  claim_text,
  component_subscribe,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  globals,
  group_outros,
  init,
  insert_hydration_dev,
  onMount,
  safe_not_equal,
  setContext,
  set_data_dev,
  set_store_value,
  set_style,
  space,
  svg_element,
  text,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-KTOWGLLN.js";
import "./chunk-5UFCALFR.js";
import "./chunk-34KZWS7D.js";

// node_modules/layercake/dist/utils/canBeZero.js
function canBeZero(val) {
  if (val === 0) {
    return true;
  }
  return val;
}

// node_modules/layercake/dist/utils/makeAccessor.js
function makeAccessor(acc) {
  if (!canBeZero(acc))
    return null;
  if (Array.isArray(acc)) {
    return (d) => acc.map((k) => {
      return typeof k !== "function" ? d[k] : k(d);
    });
  } else if (typeof acc !== "function") {
    return (d) => d[acc];
  }
  return acc;
}

// node_modules/layercake/dist/utils/filterObject.js
function fromEntries(iter) {
  const obj = {};
  for (const pair of iter) {
    if (Object(pair) !== pair) {
      throw new TypeError("iterable for fromEntries should yield objects");
    }
    const { "0": key, "1": val } = pair;
    Object.defineProperty(obj, key, {
      configurable: true,
      enumerable: true,
      writable: true,
      value: val
    });
  }
  return obj;
}
function filterObject(obj, comparisonObj = {}) {
  return fromEntries(Object.entries(obj).filter(([key, value]) => {
    return value !== void 0 && comparisonObj[key] === void 0;
  }));
}

// node_modules/layercake/dist/utils/debounce.js
function debounce(func, timeout = 300) {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      func.apply(this, args);
    }, timeout);
  };
}

// node_modules/layercake/dist/lib/calcUniques.js
function calcUniques(data, fields, { sort = false } = {}) {
  if (!Array.isArray(data)) {
    throw new TypeError(`The first argument of calcUniques() must be an array. You passed in a ${typeof data}. If you got this error using the <LayerCake> component, consider passing a flat array to the \`flatData\` prop. More info: https://layercake.graphics/guide/#flatdata`);
  }
  if (Array.isArray(fields) || fields === void 0 || fields === null) {
    throw new TypeError("The second argument of calcUniques() must be an object with field names as keys as accessor functions as values.");
  }
  const uniques2 = {};
  const keys = Object.keys(fields);
  const kl = keys.length;
  let i;
  let j;
  let k;
  let s;
  let acc;
  let val;
  let set;
  const dl = data.length;
  for (i = 0; i < kl; i += 1) {
    set = /* @__PURE__ */ new Set();
    s = keys[i];
    acc = fields[s];
    for (j = 0; j < dl; j += 1) {
      val = acc(data[j]);
      if (Array.isArray(val)) {
        const vl = val.length;
        for (k = 0; k < vl; k += 1) {
          set.add(val[k]);
        }
      } else {
        set.add(val);
      }
    }
    const results = Array.from(set);
    uniques2[s] = sort === true ? results.sort() : results;
  }
  return uniques2;
}

// node_modules/layercake/dist/lib/calcExtents.js
function calcExtents(data, fields) {
  if (!Array.isArray(data)) {
    throw new TypeError(`The first argument of calcExtents() must be an array. You passed in a ${typeof data}. If you got this error using the <LayerCake> component, consider passing a flat array to the \`flatData\` prop. More info: https://layercake.graphics/guide/#flatdata`);
  }
  if (Array.isArray(fields) || fields === void 0 || fields === null) {
    throw new TypeError("The second argument of calcExtents() must be an object with field names as keys as accessor functions as values.");
  }
  const extents = {};
  const keys = Object.keys(fields);
  const kl = keys.length;
  let i;
  let j;
  let k;
  let s;
  let min;
  let max;
  let acc;
  let val;
  const dl = data.length;
  for (i = 0; i < kl; i += 1) {
    s = keys[i];
    acc = fields[s];
    min = null;
    max = null;
    for (j = 0; j < dl; j += 1) {
      val = acc(data[j]);
      if (Array.isArray(val)) {
        const vl = val.length;
        for (k = 0; k < vl; k += 1) {
          if (val[k] !== false && val[k] !== void 0 && val[k] !== null && Number.isNaN(val[k]) === false) {
            if (min === null || val[k] < min) {
              min = val[k];
            }
            if (max === null || val[k] > max) {
              max = val[k];
            }
          }
        }
      } else if (val !== false && val !== void 0 && val !== null && Number.isNaN(val) === false) {
        if (min === null || val < min) {
          min = val;
        }
        if (max === null || val > max) {
          max = val;
        }
      }
    }
    extents[s] = [min, max];
  }
  return extents;
}

// node_modules/layercake/dist/utils/arraysEqual.js
function arraysEqual(arr1, arr2) {
  if (arr1.length !== arr2.length)
    return false;
  return arr1.every((k) => {
    return arr2.includes(k);
  });
}

// node_modules/layercake/dist/helpers/isOrdinalDomain.js
function isOrdinalDomain(scale) {
  if (typeof scale.bandwidth === "function") {
    return true;
  }
  if (arraysEqual(Object.keys(scale), ["domain", "range", "unknown", "copy"])) {
    return true;
  }
  return false;
}

// node_modules/layercake/dist/helpers/calcScaleExtents.js
function calcScaleExtents(flatData, getters, activeScales) {
  const scaleGroups = Object.keys(activeScales).reduce((groups, k) => {
    const domainType = isOrdinalDomain(activeScales[k]) === true ? "ordinal" : "other";
    if (!groups[domainType])
      groups[domainType] = {};
    groups[domainType][k] = getters[k];
    return groups;
  }, { ordinal: false, other: false });
  let extents = {};
  if (scaleGroups.ordinal) {
    extents = calcUniques(flatData, scaleGroups.ordinal);
  }
  if (scaleGroups.other) {
    extents = { ...extents, ...calcExtents(flatData, scaleGroups.other) };
  }
  return extents;
}

// node_modules/layercake/dist/utils/partialDomain.js
function partialDomain(domain = [], directive) {
  if (Array.isArray(directive) === true) {
    return directive.map((d, i) => {
      if (d === null) {
        return domain[i];
      }
      return d;
    });
  }
  return domain;
}

// node_modules/layercake/dist/helpers/calcDomain.js
function calcDomain(s) {
  return function domainCalc([$extents, $domain]) {
    if (typeof $domain === "function") {
      $domain = $domain($extents[s]);
    }
    return $extents ? partialDomain($extents[s], $domain) : $domain;
  };
}

// node_modules/layercake/dist/settings/defaultScales.js
var defaultScales_default = {
  x: linear,
  y: linear,
  z: linear,
  r: sqrt
};

// node_modules/layercake/dist/helpers/findScaleType.js
function findScaleType(scale) {
  if (scale.constant) {
    return "symlog";
  }
  if (scale.base) {
    return "log";
  }
  if (scale.exponent) {
    if (scale.exponent() === 0.5) {
      return "sqrt";
    }
    return "pow";
  }
  return "other";
}

// node_modules/layercake/dist/utils/identity.js
function identity(d) {
  return d;
}

// node_modules/layercake/dist/helpers/getPadFunctions.js
function log(sign) {
  return (x) => Math.log(sign * x);
}
function exp(sign) {
  return (x) => sign * Math.exp(x);
}
function symlog(c) {
  return (x) => Math.sign(x) * Math.log1p(Math.abs(x / c));
}
function symexp(c) {
  return (x) => Math.sign(x) * Math.expm1(Math.abs(x)) * c;
}
function pow(exponent) {
  return function powFn(x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}
function getPadFunctions(scale) {
  const scaleType = findScaleType(scale);
  if (scaleType === "log") {
    const sign = Math.sign(scale.domain()[0]);
    return { lift: log(sign), ground: exp(sign), scaleType };
  }
  if (scaleType === "pow") {
    const exponent = 1;
    return { lift: pow(exponent), ground: pow(1 / exponent), scaleType };
  }
  if (scaleType === "sqrt") {
    const exponent = 0.5;
    return { lift: pow(exponent), ground: pow(1 / exponent), scaleType };
  }
  if (scaleType === "symlog") {
    const constant = 1;
    return { lift: symlog(constant), ground: symexp(constant), scaleType };
  }
  return { lift: identity, ground: identity, scaleType };
}

// node_modules/layercake/dist/helpers/toTitleCase.js
function toTitleCase(str) {
  return str.replace(/^\w/, (d) => d.toUpperCase());
}

// node_modules/layercake/dist/helpers/findScaleName.js
function f(name, modifier = "") {
  return `scale${toTitleCase(modifier)}${toTitleCase(name)}`;
}
function findScaleName(scale) {
  if (typeof scale.bandwidth === "function") {
    if (typeof scale.paddingInner === "function") {
      return f("band");
    }
    return f("point");
  }
  if (arraysEqual(Object.keys(scale), ["domain", "range", "unknown", "copy"])) {
    return f("ordinal");
  }
  let modifier = "";
  if (scale.interpolator) {
    if (scale.domain().length === 3) {
      modifier = "diverging";
    } else {
      modifier = "sequential";
    }
  }
  if (scale.quantiles) {
    return f("quantile", modifier);
  }
  if (scale.thresholds) {
    return f("quantize", modifier);
  }
  if (scale.constant) {
    return f("symlog", modifier);
  }
  if (scale.base) {
    return f("log", modifier);
  }
  if (scale.exponent) {
    if (scale.exponent() === 0.5) {
      return f("sqrt", modifier);
    }
    return f("pow", modifier);
  }
  if (arraysEqual(Object.keys(scale), ["domain", "range", "invertExtent", "unknown", "copy"])) {
    return f("threshold");
  }
  if (arraysEqual(Object.keys(scale), ["invert", "range", "domain", "unknown", "copy", "ticks", "tickFormat", "nice"])) {
    return f("identity");
  }
  if (arraysEqual(Object.keys(scale), [
    "invert",
    "domain",
    "range",
    "rangeRound",
    "round",
    "clamp",
    "unknown",
    "copy",
    "ticks",
    "tickFormat",
    "nice"
  ])) {
    return f("radial");
  }
  if (modifier) {
    return f(modifier);
  }
  if (scale.domain()[0] instanceof Date) {
    const d = /* @__PURE__ */ new Date();
    let s;
    d.getDay = () => s = "time";
    d.getUTCDay = () => s = "utc";
    scale.tickFormat(0, "%a")(d);
    return f(s);
  }
  return f("linear");
}

// node_modules/layercake/dist/utils/padScale.js
var unpaddable = ["scaleThreshold", "scaleQuantile", "scaleQuantize", "scaleSequentialQuantile"];
function padScale(scale, padding) {
  if (typeof scale.range !== "function") {
    console.log(scale);
    throw new Error("Scale method `range` must be a function");
  }
  if (typeof scale.domain !== "function") {
    throw new Error("Scale method `domain` must be a function");
  }
  if (!Array.isArray(padding) || unpaddable.includes(findScaleName(scale))) {
    return scale.domain();
  }
  if (isOrdinalDomain(scale) === true) {
    return scale.domain();
  }
  const { lift, ground } = getPadFunctions(scale);
  const d0 = scale.domain()[0];
  const isTime = Object.prototype.toString.call(d0) === "[object Date]";
  const [d1, d2] = scale.domain().map((d) => {
    return isTime ? lift(d.getTime()) : lift(d);
  });
  const [r1, r2] = scale.range();
  const paddingLeft = padding[0] || 0;
  const paddingRight = padding[1] || 0;
  const step = (d2 - d1) / (Math.abs(r2 - r1) - paddingLeft - paddingRight);
  return [d1 - paddingLeft * step, paddingRight * step + d2].map((d) => {
    return isTime ? ground(new Date(d)) : ground(d);
  });
}

// node_modules/layercake/dist/settings/getDefaultRange.js
function calcBaseRange(s, width, height, reverse, percentRange) {
  let min;
  let max;
  if (percentRange === true) {
    min = 0;
    max = 100;
  } else {
    min = s === "r" ? 1 : 0;
    max = s === "y" ? height : s === "r" ? 25 : width;
  }
  return reverse === true ? [max, min] : [min, max];
}
function getDefaultRange(s, width, height, reverse, range, percentRange) {
  return !range ? calcBaseRange(s, width, height, reverse, percentRange) : typeof range === "function" ? range({ width, height }) : range;
}

// node_modules/layercake/dist/helpers/createScale.js
function createScale(s) {
  return function scaleCreator([$scale, $extents, $domain, $padding, $nice, $reverse, $width, $height, $range, $percentScale]) {
    if ($extents === null) {
      return null;
    }
    const defaultRange = getDefaultRange(s, $width, $height, $reverse, $range, $percentScale);
    const scale = $scale === defaultScales_default[s] ? $scale() : $scale.copy();
    scale.domain($domain);
    if (!scale.interpolator || typeof scale.interpolator === "function" && scale.interpolator().name.startsWith("identity")) {
      scale.range(defaultRange);
    }
    if ($padding) {
      scale.domain(padScale(scale, $padding));
    }
    if ($nice === true || typeof $nice === "number") {
      if (typeof scale.nice === "function") {
        scale.nice(typeof $nice === "number" ? $nice : void 0);
      } else {
        console.error(`[Layer Cake] You set \`${s}Nice: true\` but the ${s}Scale does not have a \`.nice\` method. Ignoring...`);
      }
    }
    return scale;
  };
}

// node_modules/layercake/dist/helpers/createGetter.js
function createGetter([$acc, $scale]) {
  return (d) => {
    const val = $acc(d);
    if (Array.isArray(val)) {
      return val.map((v) => $scale(v));
    }
    return $scale(val);
  };
}

// node_modules/layercake/dist/helpers/getRange.js
function getRange([$scale]) {
  if (typeof $scale === "function") {
    if (typeof $scale.range === "function") {
      return $scale.range();
    }
    console.error("[LayerCake] Your scale doesn't have a `.range` method?");
  }
  return null;
}

// node_modules/layercake/dist/helpers/printDebug.js
var indent = "    ";
function getRgb(clr) {
  const { r, g, b, opacity: o } = rgb(clr);
  if (![r, g, b].every((c) => c >= 0 && c <= 255)) {
    return false;
  }
  return { r, g, b, o };
}
function contrast({ r, g, b }) {
  const luminance = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255;
  return luminance > 0.6 ? "black" : "white";
}
function printDebug(obj) {
  console.log("/********* LayerCake Debug ************/");
  console.log("Bounding box:");
  printObject(obj.boundingBox);
  console.log("Scales:\n");
  Object.keys(obj.activeGetters).forEach((g) => {
    printScale(g, obj[`${g}Scale`], obj[g]);
  });
  console.log("/************ End LayerCake Debug ***************/\n");
}
function printObject(obj) {
  Object.entries(obj).forEach(([key, value]) => {
    console.log(`${indent}${key}:`, value);
  });
}
function printScale(s, scale, acc) {
  const scaleName = findScaleName(scale);
  console.log(`${indent}${s}:`);
  console.log(`${indent}${indent}Accessor: "${acc.toString()}"`);
  console.log(`${indent}${indent}Type: ${scaleName}`);
  printValues(scale, "domain");
  printValues(scale, "range", " ");
}
function printValues(scale, method, extraSpace = "") {
  const values = scale[method]();
  const colorValues = colorizeArray(values);
  if (colorValues) {
    printColorArray(colorValues, method, values);
  } else {
    console.log(`${indent}${indent}${toTitleCase(method)}:${extraSpace}`, values);
  }
}
function printColorArray(colorValues, method, values) {
  console.log(
    `${indent}${indent}${toTitleCase(method)}:    %cArray%c(${values.length}) ` + colorValues[0] + "%c ]",
    "color: #1377e4",
    "color: #737373",
    "color: #1478e4",
    ...colorValues[1],
    "color: #1478e4"
  );
}
function colorizeArray(arr) {
  const colors = [];
  const a = arr.map((d, i) => {
    const rgbo = getRgb(d);
    if (rgbo !== false) {
      colors.push(rgbo);
      const space2 = i === arr.length - 1 ? " " : "";
      return `%c ${d}${space2}`;
    }
    return d;
  });
  if (colors.length) {
    return [
      `%c[ ${a.join(", ")}`,
      colors.map(
        (d) => `background-color: rgba(${d.r}, ${d.g}, ${d.b}, ${d.o}); color:${contrast(d)};`
      )
    ];
  }
  return null;
}

// node_modules/layercake/dist/LayerCake.svelte
var { Object: Object_1, console: console_1 } = globals;
var file = "node_modules/layercake/dist/LayerCake.svelte";
function add_css(target) {
  append_styles(target, "svelte-1ufsfke", ".layercake-container.svelte-1ufsfke,.layercake-container.svelte-1ufsfke *{-webkit-box-sizing:border-box;box-sizing:border-box}.layercake-container.svelte-1ufsfke{width:100%;height:100%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGF5ZXJDYWtlLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF5aEJDLDBFQUVDLDZCQUFzQixDQUF0QixxQkFDRCxDQUNBLG9DQUNDLFVBQVcsQ0FDWCxXQUNEIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkxheWVyQ2FrZS5zdmVsdGUiXX0= */");
}
var get_default_slot_changes = (dirty) => ({
  element: dirty[0] & /*element*/
  4,
  width: dirty[1] & /*$width_d*/
  8,
  height: dirty[1] & /*$height_d*/
  16,
  aspectRatio: dirty[1] & /*$aspectRatio_d*/
  32,
  containerWidth: dirty[1] & /*$_containerWidth*/
  2,
  containerHeight: dirty[1] & /*$_containerHeight*/
  1,
  activeGetters: dirty[0] & /*$activeGetters_d*/
  1024,
  percentRange: dirty[1] & /*$_percentRange*/
  4,
  x: dirty[0] & /*$_x*/
  268435456,
  y: dirty[0] & /*$_y*/
  134217728,
  z: dirty[0] & /*$_z*/
  67108864,
  r: dirty[0] & /*$_r*/
  33554432,
  custom: dirty[0] & /*$_custom*/
  4096,
  data: dirty[0] & /*$_data*/
  1073741824,
  xNice: dirty[0] & /*$_xNice*/
  16777216,
  yNice: dirty[0] & /*$_yNice*/
  8388608,
  zNice: dirty[0] & /*$_zNice*/
  4194304,
  rNice: dirty[0] & /*$_rNice*/
  2097152,
  xReverse: dirty[0] & /*$_xReverse*/
  1048576,
  yReverse: dirty[0] & /*$_yReverse*/
  524288,
  zReverse: dirty[0] & /*$_zReverse*/
  262144,
  rReverse: dirty[0] & /*$_rReverse*/
  131072,
  xPadding: dirty[0] & /*$_xPadding*/
  65536,
  yPadding: dirty[0] & /*$_yPadding*/
  32768,
  zPadding: dirty[0] & /*$_zPadding*/
  16384,
  rPadding: dirty[0] & /*$_rPadding*/
  8192,
  padding: dirty[1] & /*$padding_d*/
  64,
  flatData: dirty[0] & /*$_flatData*/
  536870912,
  extents: dirty[1] & /*$extents_d*/
  128,
  xDomain: dirty[1] & /*$xDomain_d*/
  256,
  yDomain: dirty[1] & /*$yDomain_d*/
  512,
  zDomain: dirty[1] & /*$zDomain_d*/
  1024,
  rDomain: dirty[1] & /*$rDomain_d*/
  2048,
  xRange: dirty[1] & /*$xRange_d*/
  4096,
  yRange: dirty[1] & /*$yRange_d*/
  8192,
  zRange: dirty[1] & /*$zRange_d*/
  16384,
  rRange: dirty[1] & /*$rRange_d*/
  32768,
  config: dirty[0] & /*$_config*/
  2048,
  xScale: dirty[0] & /*$xScale_d*/
  512,
  xGet: dirty[1] & /*$xGet_d*/
  65536,
  yScale: dirty[0] & /*$yScale_d*/
  256,
  yGet: dirty[1] & /*$yGet_d*/
  131072,
  zScale: dirty[0] & /*$zScale_d*/
  128,
  zGet: dirty[1] & /*$zGet_d*/
  262144,
  rScale: dirty[0] & /*$rScale_d*/
  64,
  rGet: dirty[1] & /*$rGet_d*/
  524288
});
var get_default_slot_context = (ctx) => ({
  element: (
    /*element*/
    ctx[2]
  ),
  width: (
    /*$width_d*/
    ctx[34]
  ),
  height: (
    /*$height_d*/
    ctx[35]
  ),
  aspectRatio: (
    /*$aspectRatio_d*/
    ctx[36]
  ),
  containerWidth: (
    /*$_containerWidth*/
    ctx[32]
  ),
  containerHeight: (
    /*$_containerHeight*/
    ctx[31]
  ),
  activeGetters: (
    /*$activeGetters_d*/
    ctx[10]
  ),
  percentRange: (
    /*$_percentRange*/
    ctx[33]
  ),
  x: (
    /*$_x*/
    ctx[28]
  ),
  y: (
    /*$_y*/
    ctx[27]
  ),
  z: (
    /*$_z*/
    ctx[26]
  ),
  r: (
    /*$_r*/
    ctx[25]
  ),
  custom: (
    /*$_custom*/
    ctx[12]
  ),
  data: (
    /*$_data*/
    ctx[30]
  ),
  xNice: (
    /*$_xNice*/
    ctx[24]
  ),
  yNice: (
    /*$_yNice*/
    ctx[23]
  ),
  zNice: (
    /*$_zNice*/
    ctx[22]
  ),
  rNice: (
    /*$_rNice*/
    ctx[21]
  ),
  xReverse: (
    /*$_xReverse*/
    ctx[20]
  ),
  yReverse: (
    /*$_yReverse*/
    ctx[19]
  ),
  zReverse: (
    /*$_zReverse*/
    ctx[18]
  ),
  rReverse: (
    /*$_rReverse*/
    ctx[17]
  ),
  xPadding: (
    /*$_xPadding*/
    ctx[16]
  ),
  yPadding: (
    /*$_yPadding*/
    ctx[15]
  ),
  zPadding: (
    /*$_zPadding*/
    ctx[14]
  ),
  rPadding: (
    /*$_rPadding*/
    ctx[13]
  ),
  padding: (
    /*$padding_d*/
    ctx[37]
  ),
  flatData: (
    /*$_flatData*/
    ctx[29]
  ),
  extents: (
    /*$extents_d*/
    ctx[38]
  ),
  xDomain: (
    /*$xDomain_d*/
    ctx[39]
  ),
  yDomain: (
    /*$yDomain_d*/
    ctx[40]
  ),
  zDomain: (
    /*$zDomain_d*/
    ctx[41]
  ),
  rDomain: (
    /*$rDomain_d*/
    ctx[42]
  ),
  xRange: (
    /*$xRange_d*/
    ctx[43]
  ),
  yRange: (
    /*$yRange_d*/
    ctx[44]
  ),
  zRange: (
    /*$zRange_d*/
    ctx[45]
  ),
  rRange: (
    /*$rRange_d*/
    ctx[46]
  ),
  config: (
    /*$_config*/
    ctx[11]
  ),
  xScale: (
    /*$xScale_d*/
    ctx[9]
  ),
  xGet: (
    /*$xGet_d*/
    ctx[47]
  ),
  yScale: (
    /*$yScale_d*/
    ctx[8]
  ),
  yGet: (
    /*$yGet_d*/
    ctx[48]
  ),
  zScale: (
    /*$zScale_d*/
    ctx[7]
  ),
  zGet: (
    /*$zGet_d*/
    ctx[49]
  ),
  rScale: (
    /*$rScale_d*/
    ctx[6]
  ),
  rGet: (
    /*$rGet_d*/
    ctx[50]
  )
});
function create_if_block(ctx) {
  let div;
  let div_resize_listener;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[153].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[152],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "layercake-container svelte-1ufsfke");
      add_render_callback(() => (
        /*div_elementresize_handler*/
        ctx[155].call(div)
      ));
      set_style(
        div,
        "position",
        /*position*/
        ctx[5]
      );
      set_style(
        div,
        "top",
        /*position*/
        ctx[5] === "absolute" ? "0" : null
      );
      set_style(
        div,
        "right",
        /*position*/
        ctx[5] === "absolute" ? "0" : null
      );
      set_style(
        div,
        "bottom",
        /*position*/
        ctx[5] === "absolute" ? "0" : null
      );
      set_style(
        div,
        "left",
        /*position*/
        ctx[5] === "absolute" ? "0" : null
      );
      set_style(
        div,
        "pointer-events",
        /*pointerEvents*/
        ctx[4] === false ? "none" : null
      );
      add_location(div, file, 473, 1, 21905);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[154](div);
      div_resize_listener = add_iframe_resize_listener(
        div,
        /*div_elementresize_handler*/
        ctx[155].bind(div)
      );
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*element, $activeGetters_d, $_x, $_y, $_z, $_r, $_custom, $_data, $_xNice, $_yNice, $_zNice, $_rNice, $_xReverse, $_yReverse, $_zReverse, $_rReverse, $_xPadding, $_yPadding, $_zPadding, $_rPadding, $_flatData, $_config, $xScale_d, $yScale_d, $zScale_d, $rScale_d*/
        2147483588 | dirty[1] & /*$width_d, $height_d, $aspectRatio_d, $_containerWidth, $_containerHeight, $_percentRange, $padding_d, $extents_d, $xDomain_d, $yDomain_d, $zDomain_d, $rDomain_d, $xRange_d, $yRange_d, $zRange_d, $rRange_d, $xGet_d, $yGet_d, $zGet_d, $rGet_d*/
        1048575 | dirty[4] & /*$$scope*/
        268435456)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[152],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[152]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[152],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
      if (dirty[0] & /*position*/
      32) {
        set_style(
          div,
          "position",
          /*position*/
          ctx2[5]
        );
      }
      if (dirty[0] & /*position*/
      32) {
        set_style(
          div,
          "top",
          /*position*/
          ctx2[5] === "absolute" ? "0" : null
        );
      }
      if (dirty[0] & /*position*/
      32) {
        set_style(
          div,
          "right",
          /*position*/
          ctx2[5] === "absolute" ? "0" : null
        );
      }
      if (dirty[0] & /*position*/
      32) {
        set_style(
          div,
          "bottom",
          /*position*/
          ctx2[5] === "absolute" ? "0" : null
        );
      }
      if (dirty[0] & /*position*/
      32) {
        set_style(
          div,
          "left",
          /*position*/
          ctx2[5] === "absolute" ? "0" : null
        );
      }
      if (dirty[0] & /*pointerEvents*/
      16) {
        set_style(
          div,
          "pointer-events",
          /*pointerEvents*/
          ctx2[4] === false ? "none" : null
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[154](null);
      div_resize_listener();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(473:0) {#if ssr === true || typeof window !== 'undefined'}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*ssr*/
    (ctx[3] === true || typeof window !== "undefined") && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (
        /*ssr*/
        ctx2[3] === true || typeof window !== "undefined"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*ssr*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let yReverseValue;
  let context;
  let $rScale_d;
  let $zScale_d;
  let $yScale_d;
  let $xScale_d;
  let $activeGetters_d;
  let $box_d;
  let $_config;
  let $_custom;
  let $_rScale;
  let $_zScale;
  let $_yScale;
  let $_xScale;
  let $_rRange;
  let $_zRange;
  let $_yRange;
  let $_xRange;
  let $_rPadding;
  let $_zPadding;
  let $_yPadding;
  let $_xPadding;
  let $_rReverse;
  let $_zReverse;
  let $_yReverse;
  let $_xReverse;
  let $_rNice;
  let $_zNice;
  let $_yNice;
  let $_xNice;
  let $_rDomain;
  let $_zDomain;
  let $_yDomain;
  let $_xDomain;
  let $_r;
  let $_z;
  let $_y;
  let $_x;
  let $_padding;
  let $_flatData;
  let $_data;
  let $_extents;
  let $_containerHeight;
  let $_containerWidth;
  let $_percentRange;
  let $width_d;
  let $height_d;
  let $aspectRatio_d;
  let $padding_d;
  let $extents_d;
  let $xDomain_d;
  let $yDomain_d;
  let $zDomain_d;
  let $rDomain_d;
  let $xRange_d;
  let $yRange_d;
  let $zRange_d;
  let $rRange_d;
  let $xGet_d;
  let $yGet_d;
  let $zGet_d;
  let $rGet_d;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("LayerCake", slots, ["default"]);
  const printDebug_debounced = debounce(printDebug, 200);
  let { ssr = false } = $$props;
  let { pointerEvents = true } = $$props;
  let { position = "relative" } = $$props;
  let { percentRange = false } = $$props;
  let { width = void 0 } = $$props;
  let { height = void 0 } = $$props;
  let { containerWidth = width || 100 } = $$props;
  let { containerHeight = height || 100 } = $$props;
  let { element: element2 = void 0 } = $$props;
  let { x = void 0 } = $$props;
  let { y = void 0 } = $$props;
  let { z = void 0 } = $$props;
  let { r = void 0 } = $$props;
  let { data = [] } = $$props;
  let { xDomain = void 0 } = $$props;
  let { yDomain = void 0 } = $$props;
  let { zDomain = void 0 } = $$props;
  let { rDomain = void 0 } = $$props;
  let { xNice = false } = $$props;
  let { yNice = false } = $$props;
  let { zNice = false } = $$props;
  let { rNice = false } = $$props;
  let { xPadding = void 0 } = $$props;
  let { yPadding = void 0 } = $$props;
  let { zPadding = void 0 } = $$props;
  let { rPadding = void 0 } = $$props;
  let { xScale = defaultScales_default.x } = $$props;
  let { yScale = defaultScales_default.y } = $$props;
  let { zScale = defaultScales_default.z } = $$props;
  let { rScale = defaultScales_default.r } = $$props;
  let { xRange = void 0 } = $$props;
  let { yRange = void 0 } = $$props;
  let { zRange = void 0 } = $$props;
  let { rRange = void 0 } = $$props;
  let { xReverse = false } = $$props;
  let { yReverse = void 0 } = $$props;
  let { zReverse = false } = $$props;
  let { rReverse = false } = $$props;
  let { padding = {} } = $$props;
  let { extents = {} } = $$props;
  let { flatData = void 0 } = $$props;
  let { custom = {} } = $$props;
  let { debug = false } = $$props;
  let isMounted = false;
  onMount(() => {
    isMounted = true;
  });
  const config = {};
  const _percentRange = writable(percentRange);
  validate_store(_percentRange, "_percentRange");
  component_subscribe($$self, _percentRange, (value) => $$invalidate(33, $_percentRange = value));
  const _containerWidth = writable(containerWidth);
  validate_store(_containerWidth, "_containerWidth");
  component_subscribe($$self, _containerWidth, (value) => $$invalidate(32, $_containerWidth = value));
  const _containerHeight = writable(containerHeight);
  validate_store(_containerHeight, "_containerHeight");
  component_subscribe($$self, _containerHeight, (value) => $$invalidate(31, $_containerHeight = value));
  const _extents = writable(filterObject(extents));
  validate_store(_extents, "_extents");
  component_subscribe($$self, _extents, (value) => $$invalidate(170, $_extents = value));
  const _data = writable(data);
  validate_store(_data, "_data");
  component_subscribe($$self, _data, (value) => $$invalidate(30, $_data = value));
  const _flatData = writable(flatData || data);
  validate_store(_flatData, "_flatData");
  component_subscribe($$self, _flatData, (value) => $$invalidate(29, $_flatData = value));
  const _padding = writable(padding);
  validate_store(_padding, "_padding");
  component_subscribe($$self, _padding, (value) => $$invalidate(169, $_padding = value));
  const _x = writable(makeAccessor(x));
  validate_store(_x, "_x");
  component_subscribe($$self, _x, (value) => $$invalidate(28, $_x = value));
  const _y = writable(makeAccessor(y));
  validate_store(_y, "_y");
  component_subscribe($$self, _y, (value) => $$invalidate(27, $_y = value));
  const _z = writable(makeAccessor(z));
  validate_store(_z, "_z");
  component_subscribe($$self, _z, (value) => $$invalidate(26, $_z = value));
  const _r = writable(makeAccessor(r));
  validate_store(_r, "_r");
  component_subscribe($$self, _r, (value) => $$invalidate(25, $_r = value));
  const _xDomain = writable(xDomain);
  validate_store(_xDomain, "_xDomain");
  component_subscribe($$self, _xDomain, (value) => $$invalidate(168, $_xDomain = value));
  const _yDomain = writable(yDomain);
  validate_store(_yDomain, "_yDomain");
  component_subscribe($$self, _yDomain, (value) => $$invalidate(167, $_yDomain = value));
  const _zDomain = writable(zDomain);
  validate_store(_zDomain, "_zDomain");
  component_subscribe($$self, _zDomain, (value) => $$invalidate(166, $_zDomain = value));
  const _rDomain = writable(rDomain);
  validate_store(_rDomain, "_rDomain");
  component_subscribe($$self, _rDomain, (value) => $$invalidate(165, $_rDomain = value));
  const _xNice = writable(xNice);
  validate_store(_xNice, "_xNice");
  component_subscribe($$self, _xNice, (value) => $$invalidate(24, $_xNice = value));
  const _yNice = writable(yNice);
  validate_store(_yNice, "_yNice");
  component_subscribe($$self, _yNice, (value) => $$invalidate(23, $_yNice = value));
  const _zNice = writable(zNice);
  validate_store(_zNice, "_zNice");
  component_subscribe($$self, _zNice, (value) => $$invalidate(22, $_zNice = value));
  const _rNice = writable(rNice);
  validate_store(_rNice, "_rNice");
  component_subscribe($$self, _rNice, (value) => $$invalidate(21, $_rNice = value));
  const _xReverse = writable(xReverse);
  validate_store(_xReverse, "_xReverse");
  component_subscribe($$self, _xReverse, (value) => $$invalidate(20, $_xReverse = value));
  const _yReverse = writable(yReverseValue);
  validate_store(_yReverse, "_yReverse");
  component_subscribe($$self, _yReverse, (value) => $$invalidate(19, $_yReverse = value));
  const _zReverse = writable(zReverse);
  validate_store(_zReverse, "_zReverse");
  component_subscribe($$self, _zReverse, (value) => $$invalidate(18, $_zReverse = value));
  const _rReverse = writable(rReverse);
  validate_store(_rReverse, "_rReverse");
  component_subscribe($$self, _rReverse, (value) => $$invalidate(17, $_rReverse = value));
  const _xPadding = writable(xPadding);
  validate_store(_xPadding, "_xPadding");
  component_subscribe($$self, _xPadding, (value) => $$invalidate(16, $_xPadding = value));
  const _yPadding = writable(yPadding);
  validate_store(_yPadding, "_yPadding");
  component_subscribe($$self, _yPadding, (value) => $$invalidate(15, $_yPadding = value));
  const _zPadding = writable(zPadding);
  validate_store(_zPadding, "_zPadding");
  component_subscribe($$self, _zPadding, (value) => $$invalidate(14, $_zPadding = value));
  const _rPadding = writable(rPadding);
  validate_store(_rPadding, "_rPadding");
  component_subscribe($$self, _rPadding, (value) => $$invalidate(13, $_rPadding = value));
  const _xRange = writable(xRange);
  validate_store(_xRange, "_xRange");
  component_subscribe($$self, _xRange, (value) => $$invalidate(164, $_xRange = value));
  const _yRange = writable(yRange);
  validate_store(_yRange, "_yRange");
  component_subscribe($$self, _yRange, (value) => $$invalidate(163, $_yRange = value));
  const _zRange = writable(zRange);
  validate_store(_zRange, "_zRange");
  component_subscribe($$self, _zRange, (value) => $$invalidate(162, $_zRange = value));
  const _rRange = writable(rRange);
  validate_store(_rRange, "_rRange");
  component_subscribe($$self, _rRange, (value) => $$invalidate(161, $_rRange = value));
  const _xScale = writable(xScale);
  validate_store(_xScale, "_xScale");
  component_subscribe($$self, _xScale, (value) => $$invalidate(160, $_xScale = value));
  const _yScale = writable(yScale);
  validate_store(_yScale, "_yScale");
  component_subscribe($$self, _yScale, (value) => $$invalidate(159, $_yScale = value));
  const _zScale = writable(zScale);
  validate_store(_zScale, "_zScale");
  component_subscribe($$self, _zScale, (value) => $$invalidate(158, $_zScale = value));
  const _rScale = writable(rScale);
  validate_store(_rScale, "_rScale");
  component_subscribe($$self, _rScale, (value) => $$invalidate(157, $_rScale = value));
  const _config = writable(config);
  validate_store(_config, "_config");
  component_subscribe($$self, _config, (value) => $$invalidate(11, $_config = value));
  const _custom = writable(custom);
  validate_store(_custom, "_custom");
  component_subscribe($$self, _custom, (value) => $$invalidate(12, $_custom = value));
  const activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {
    const obj = {};
    if ($x) {
      obj.x = $x;
    }
    if ($y) {
      obj.y = $y;
    }
    if ($z) {
      obj.z = $z;
    }
    if ($r) {
      obj.r = $r;
    }
    return obj;
  });
  validate_store(activeGetters_d, "activeGetters_d");
  component_subscribe($$self, activeGetters_d, (value) => $$invalidate(10, $activeGetters_d = value));
  const padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {
    const defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };
    return Object.assign(defaultPadding, $padding);
  });
  validate_store(padding_d, "padding_d");
  component_subscribe($$self, padding_d, (value) => $$invalidate(37, $padding_d = value));
  const box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {
    const b = {};
    b.top = $padding.top;
    b.right = $containerWidth - $padding.right;
    b.bottom = $containerHeight - $padding.bottom;
    b.left = $padding.left;
    b.width = b.right - b.left;
    b.height = b.bottom - b.top;
    if (b.width <= 0 && isMounted === true) {
      console.warn("[LayerCake] Target div has zero or negative width. Did you forget to set an explicit width in CSS on the container?");
    }
    if (b.height <= 0 && isMounted === true) {
      console.warn("[LayerCake] Target div has zero or negative height. Did you forget to set an explicit height in CSS on the container?");
    }
    return b;
  });
  validate_store(box_d, "box_d");
  component_subscribe($$self, box_d, (value) => $$invalidate(151, $box_d = value));
  const width_d = derived([box_d], ([$box]) => {
    return $box.width;
  });
  validate_store(width_d, "width_d");
  component_subscribe($$self, width_d, (value) => $$invalidate(34, $width_d = value));
  const height_d = derived([box_d], ([$box]) => {
    return $box.height;
  });
  validate_store(height_d, "height_d");
  component_subscribe($$self, height_d, (value) => $$invalidate(35, $height_d = value));
  const extents_d = derived([_flatData, activeGetters_d, _extents, _xScale, _yScale, _rScale, _zScale], ([$flatData, $activeGetters, $extents, $_xScale2, $_yScale2, $_rScale2, $_zScale2]) => {
    const scaleLookup = {
      x: $_xScale2,
      y: $_yScale2,
      r: $_rScale2,
      z: $_zScale2
    };
    const getters = filterObject($activeGetters, $extents);
    const activeScales = Object.fromEntries(Object.keys(getters).map((k) => [k, scaleLookup[k]]));
    if (Object.keys(getters).length > 0) {
      const calculatedExtents = calcScaleExtents($flatData, getters, activeScales);
      return { ...calculatedExtents, ...$extents };
    } else {
      return {};
    }
  });
  validate_store(extents_d, "extents_d");
  component_subscribe($$self, extents_d, (value) => $$invalidate(38, $extents_d = value));
  const xDomain_d = derived([extents_d, _xDomain], calcDomain("x"));
  validate_store(xDomain_d, "xDomain_d");
  component_subscribe($$self, xDomain_d, (value) => $$invalidate(39, $xDomain_d = value));
  const yDomain_d = derived([extents_d, _yDomain], calcDomain("y"));
  validate_store(yDomain_d, "yDomain_d");
  component_subscribe($$self, yDomain_d, (value) => $$invalidate(40, $yDomain_d = value));
  const zDomain_d = derived([extents_d, _zDomain], calcDomain("z"));
  validate_store(zDomain_d, "zDomain_d");
  component_subscribe($$self, zDomain_d, (value) => $$invalidate(41, $zDomain_d = value));
  const rDomain_d = derived([extents_d, _rDomain], calcDomain("r"));
  validate_store(rDomain_d, "rDomain_d");
  component_subscribe($$self, rDomain_d, (value) => $$invalidate(42, $rDomain_d = value));
  const xScale_d = derived(
    [
      _xScale,
      extents_d,
      xDomain_d,
      _xPadding,
      _xNice,
      _xReverse,
      width_d,
      height_d,
      _xRange,
      _percentRange
    ],
    createScale("x")
  );
  validate_store(xScale_d, "xScale_d");
  component_subscribe($$self, xScale_d, (value) => $$invalidate(9, $xScale_d = value));
  const xGet_d = derived([_x, xScale_d], createGetter);
  validate_store(xGet_d, "xGet_d");
  component_subscribe($$self, xGet_d, (value) => $$invalidate(47, $xGet_d = value));
  const yScale_d = derived(
    [
      _yScale,
      extents_d,
      yDomain_d,
      _yPadding,
      _yNice,
      _yReverse,
      width_d,
      height_d,
      _yRange,
      _percentRange
    ],
    createScale("y")
  );
  validate_store(yScale_d, "yScale_d");
  component_subscribe($$self, yScale_d, (value) => $$invalidate(8, $yScale_d = value));
  const yGet_d = derived([_y, yScale_d], createGetter);
  validate_store(yGet_d, "yGet_d");
  component_subscribe($$self, yGet_d, (value) => $$invalidate(48, $yGet_d = value));
  const zScale_d = derived(
    [
      _zScale,
      extents_d,
      zDomain_d,
      _zPadding,
      _zNice,
      _zReverse,
      width_d,
      height_d,
      _zRange,
      _percentRange
    ],
    createScale("z")
  );
  validate_store(zScale_d, "zScale_d");
  component_subscribe($$self, zScale_d, (value) => $$invalidate(7, $zScale_d = value));
  const zGet_d = derived([_z, zScale_d], createGetter);
  validate_store(zGet_d, "zGet_d");
  component_subscribe($$self, zGet_d, (value) => $$invalidate(49, $zGet_d = value));
  const rScale_d = derived(
    [
      _rScale,
      extents_d,
      rDomain_d,
      _rPadding,
      _rNice,
      _rReverse,
      width_d,
      height_d,
      _rRange,
      _percentRange
    ],
    createScale("r")
  );
  validate_store(rScale_d, "rScale_d");
  component_subscribe($$self, rScale_d, (value) => $$invalidate(6, $rScale_d = value));
  const rGet_d = derived([_r, rScale_d], createGetter);
  validate_store(rGet_d, "rGet_d");
  component_subscribe($$self, rGet_d, (value) => $$invalidate(50, $rGet_d = value));
  const xRange_d = derived([xScale_d], getRange);
  validate_store(xRange_d, "xRange_d");
  component_subscribe($$self, xRange_d, (value) => $$invalidate(43, $xRange_d = value));
  const yRange_d = derived([yScale_d], getRange);
  validate_store(yRange_d, "yRange_d");
  component_subscribe($$self, yRange_d, (value) => $$invalidate(44, $yRange_d = value));
  const zRange_d = derived([zScale_d], getRange);
  validate_store(zRange_d, "zRange_d");
  component_subscribe($$self, zRange_d, (value) => $$invalidate(45, $zRange_d = value));
  const rRange_d = derived([rScale_d], getRange);
  validate_store(rRange_d, "rRange_d");
  component_subscribe($$self, rRange_d, (value) => $$invalidate(46, $rRange_d = value));
  const aspectRatio_d = derived([width_d, height_d], ([$width, $height]) => {
    return $width / $height;
  });
  validate_store(aspectRatio_d, "aspectRatio_d");
  component_subscribe($$self, aspectRatio_d, (value) => $$invalidate(36, $aspectRatio_d = value));
  const writable_props = [
    "ssr",
    "pointerEvents",
    "position",
    "percentRange",
    "width",
    "height",
    "containerWidth",
    "containerHeight",
    "element",
    "x",
    "y",
    "z",
    "r",
    "data",
    "xDomain",
    "yDomain",
    "zDomain",
    "rDomain",
    "xNice",
    "yNice",
    "zNice",
    "rNice",
    "xPadding",
    "yPadding",
    "zPadding",
    "rPadding",
    "xScale",
    "yScale",
    "zScale",
    "rScale",
    "xRange",
    "yRange",
    "zRange",
    "rRange",
    "xReverse",
    "yReverse",
    "zReverse",
    "rReverse",
    "padding",
    "extents",
    "flatData",
    "custom",
    "debug"
  ];
  Object_1.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_1.warn(`<LayerCake> was created with unknown prop '${key}'`);
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(2, element2);
    });
  }
  function div_elementresize_handler() {
    containerWidth = this.clientWidth;
    containerHeight = this.clientHeight;
    $$invalidate(0, containerWidth);
    $$invalidate(1, containerHeight);
  }
  $$self.$$set = ($$props2) => {
    if ("ssr" in $$props2)
      $$invalidate(3, ssr = $$props2.ssr);
    if ("pointerEvents" in $$props2)
      $$invalidate(4, pointerEvents = $$props2.pointerEvents);
    if ("position" in $$props2)
      $$invalidate(5, position = $$props2.position);
    if ("percentRange" in $$props2)
      $$invalidate(111, percentRange = $$props2.percentRange);
    if ("width" in $$props2)
      $$invalidate(112, width = $$props2.width);
    if ("height" in $$props2)
      $$invalidate(113, height = $$props2.height);
    if ("containerWidth" in $$props2)
      $$invalidate(0, containerWidth = $$props2.containerWidth);
    if ("containerHeight" in $$props2)
      $$invalidate(1, containerHeight = $$props2.containerHeight);
    if ("element" in $$props2)
      $$invalidate(2, element2 = $$props2.element);
    if ("x" in $$props2)
      $$invalidate(114, x = $$props2.x);
    if ("y" in $$props2)
      $$invalidate(115, y = $$props2.y);
    if ("z" in $$props2)
      $$invalidate(116, z = $$props2.z);
    if ("r" in $$props2)
      $$invalidate(117, r = $$props2.r);
    if ("data" in $$props2)
      $$invalidate(118, data = $$props2.data);
    if ("xDomain" in $$props2)
      $$invalidate(119, xDomain = $$props2.xDomain);
    if ("yDomain" in $$props2)
      $$invalidate(120, yDomain = $$props2.yDomain);
    if ("zDomain" in $$props2)
      $$invalidate(121, zDomain = $$props2.zDomain);
    if ("rDomain" in $$props2)
      $$invalidate(122, rDomain = $$props2.rDomain);
    if ("xNice" in $$props2)
      $$invalidate(123, xNice = $$props2.xNice);
    if ("yNice" in $$props2)
      $$invalidate(124, yNice = $$props2.yNice);
    if ("zNice" in $$props2)
      $$invalidate(125, zNice = $$props2.zNice);
    if ("rNice" in $$props2)
      $$invalidate(126, rNice = $$props2.rNice);
    if ("xPadding" in $$props2)
      $$invalidate(127, xPadding = $$props2.xPadding);
    if ("yPadding" in $$props2)
      $$invalidate(128, yPadding = $$props2.yPadding);
    if ("zPadding" in $$props2)
      $$invalidate(129, zPadding = $$props2.zPadding);
    if ("rPadding" in $$props2)
      $$invalidate(130, rPadding = $$props2.rPadding);
    if ("xScale" in $$props2)
      $$invalidate(131, xScale = $$props2.xScale);
    if ("yScale" in $$props2)
      $$invalidate(132, yScale = $$props2.yScale);
    if ("zScale" in $$props2)
      $$invalidate(133, zScale = $$props2.zScale);
    if ("rScale" in $$props2)
      $$invalidate(134, rScale = $$props2.rScale);
    if ("xRange" in $$props2)
      $$invalidate(135, xRange = $$props2.xRange);
    if ("yRange" in $$props2)
      $$invalidate(136, yRange = $$props2.yRange);
    if ("zRange" in $$props2)
      $$invalidate(137, zRange = $$props2.zRange);
    if ("rRange" in $$props2)
      $$invalidate(138, rRange = $$props2.rRange);
    if ("xReverse" in $$props2)
      $$invalidate(139, xReverse = $$props2.xReverse);
    if ("yReverse" in $$props2)
      $$invalidate(140, yReverse = $$props2.yReverse);
    if ("zReverse" in $$props2)
      $$invalidate(141, zReverse = $$props2.zReverse);
    if ("rReverse" in $$props2)
      $$invalidate(142, rReverse = $$props2.rReverse);
    if ("padding" in $$props2)
      $$invalidate(143, padding = $$props2.padding);
    if ("extents" in $$props2)
      $$invalidate(144, extents = $$props2.extents);
    if ("flatData" in $$props2)
      $$invalidate(145, flatData = $$props2.flatData);
    if ("custom" in $$props2)
      $$invalidate(146, custom = $$props2.custom);
    if ("debug" in $$props2)
      $$invalidate(147, debug = $$props2.debug);
    if ("$$scope" in $$props2)
      $$invalidate(152, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    setContext,
    onMount,
    writable,
    derived,
    makeAccessor,
    filterObject,
    debounce,
    calcScaleExtents,
    calcDomain,
    createScale,
    createGetter,
    getRange,
    printDebug,
    defaultScales: defaultScales_default,
    printDebug_debounced,
    ssr,
    pointerEvents,
    position,
    percentRange,
    width,
    height,
    containerWidth,
    containerHeight,
    element: element2,
    x,
    y,
    z,
    r,
    data,
    xDomain,
    yDomain,
    zDomain,
    rDomain,
    xNice,
    yNice,
    zNice,
    rNice,
    xPadding,
    yPadding,
    zPadding,
    rPadding,
    xScale,
    yScale,
    zScale,
    rScale,
    xRange,
    yRange,
    zRange,
    rRange,
    xReverse,
    yReverse,
    zReverse,
    rReverse,
    padding,
    extents,
    flatData,
    custom,
    debug,
    isMounted,
    config,
    _percentRange,
    _containerWidth,
    _containerHeight,
    _extents,
    _data,
    _flatData,
    _padding,
    _x,
    _y,
    _z,
    _r,
    _xDomain,
    _yDomain,
    _zDomain,
    _rDomain,
    _xNice,
    _yNice,
    _zNice,
    _rNice,
    _xReverse,
    _yReverse,
    _zReverse,
    _rReverse,
    _xPadding,
    _yPadding,
    _zPadding,
    _rPadding,
    _xRange,
    _yRange,
    _zRange,
    _rRange,
    _xScale,
    _yScale,
    _zScale,
    _rScale,
    _config,
    _custom,
    activeGetters_d,
    padding_d,
    box_d,
    width_d,
    height_d,
    extents_d,
    xDomain_d,
    yDomain_d,
    zDomain_d,
    rDomain_d,
    xScale_d,
    xGet_d,
    yScale_d,
    yGet_d,
    zScale_d,
    zGet_d,
    rScale_d,
    rGet_d,
    xRange_d,
    yRange_d,
    zRange_d,
    rRange_d,
    aspectRatio_d,
    context,
    yReverseValue,
    $rScale_d,
    $zScale_d,
    $yScale_d,
    $xScale_d,
    $activeGetters_d,
    $box_d,
    $_config,
    $_custom,
    $_rScale,
    $_zScale,
    $_yScale,
    $_xScale,
    $_rRange,
    $_zRange,
    $_yRange,
    $_xRange,
    $_rPadding,
    $_zPadding,
    $_yPadding,
    $_xPadding,
    $_rReverse,
    $_zReverse,
    $_yReverse,
    $_xReverse,
    $_rNice,
    $_zNice,
    $_yNice,
    $_xNice,
    $_rDomain,
    $_zDomain,
    $_yDomain,
    $_xDomain,
    $_r,
    $_z,
    $_y,
    $_x,
    $_padding,
    $_flatData,
    $_data,
    $_extents,
    $_containerHeight,
    $_containerWidth,
    $_percentRange,
    $width_d,
    $height_d,
    $aspectRatio_d,
    $padding_d,
    $extents_d,
    $xDomain_d,
    $yDomain_d,
    $zDomain_d,
    $rDomain_d,
    $xRange_d,
    $yRange_d,
    $zRange_d,
    $rRange_d,
    $xGet_d,
    $yGet_d,
    $zGet_d,
    $rGet_d
  });
  $$self.$inject_state = ($$props2) => {
    if ("ssr" in $$props2)
      $$invalidate(3, ssr = $$props2.ssr);
    if ("pointerEvents" in $$props2)
      $$invalidate(4, pointerEvents = $$props2.pointerEvents);
    if ("position" in $$props2)
      $$invalidate(5, position = $$props2.position);
    if ("percentRange" in $$props2)
      $$invalidate(111, percentRange = $$props2.percentRange);
    if ("width" in $$props2)
      $$invalidate(112, width = $$props2.width);
    if ("height" in $$props2)
      $$invalidate(113, height = $$props2.height);
    if ("containerWidth" in $$props2)
      $$invalidate(0, containerWidth = $$props2.containerWidth);
    if ("containerHeight" in $$props2)
      $$invalidate(1, containerHeight = $$props2.containerHeight);
    if ("element" in $$props2)
      $$invalidate(2, element2 = $$props2.element);
    if ("x" in $$props2)
      $$invalidate(114, x = $$props2.x);
    if ("y" in $$props2)
      $$invalidate(115, y = $$props2.y);
    if ("z" in $$props2)
      $$invalidate(116, z = $$props2.z);
    if ("r" in $$props2)
      $$invalidate(117, r = $$props2.r);
    if ("data" in $$props2)
      $$invalidate(118, data = $$props2.data);
    if ("xDomain" in $$props2)
      $$invalidate(119, xDomain = $$props2.xDomain);
    if ("yDomain" in $$props2)
      $$invalidate(120, yDomain = $$props2.yDomain);
    if ("zDomain" in $$props2)
      $$invalidate(121, zDomain = $$props2.zDomain);
    if ("rDomain" in $$props2)
      $$invalidate(122, rDomain = $$props2.rDomain);
    if ("xNice" in $$props2)
      $$invalidate(123, xNice = $$props2.xNice);
    if ("yNice" in $$props2)
      $$invalidate(124, yNice = $$props2.yNice);
    if ("zNice" in $$props2)
      $$invalidate(125, zNice = $$props2.zNice);
    if ("rNice" in $$props2)
      $$invalidate(126, rNice = $$props2.rNice);
    if ("xPadding" in $$props2)
      $$invalidate(127, xPadding = $$props2.xPadding);
    if ("yPadding" in $$props2)
      $$invalidate(128, yPadding = $$props2.yPadding);
    if ("zPadding" in $$props2)
      $$invalidate(129, zPadding = $$props2.zPadding);
    if ("rPadding" in $$props2)
      $$invalidate(130, rPadding = $$props2.rPadding);
    if ("xScale" in $$props2)
      $$invalidate(131, xScale = $$props2.xScale);
    if ("yScale" in $$props2)
      $$invalidate(132, yScale = $$props2.yScale);
    if ("zScale" in $$props2)
      $$invalidate(133, zScale = $$props2.zScale);
    if ("rScale" in $$props2)
      $$invalidate(134, rScale = $$props2.rScale);
    if ("xRange" in $$props2)
      $$invalidate(135, xRange = $$props2.xRange);
    if ("yRange" in $$props2)
      $$invalidate(136, yRange = $$props2.yRange);
    if ("zRange" in $$props2)
      $$invalidate(137, zRange = $$props2.zRange);
    if ("rRange" in $$props2)
      $$invalidate(138, rRange = $$props2.rRange);
    if ("xReverse" in $$props2)
      $$invalidate(139, xReverse = $$props2.xReverse);
    if ("yReverse" in $$props2)
      $$invalidate(140, yReverse = $$props2.yReverse);
    if ("zReverse" in $$props2)
      $$invalidate(141, zReverse = $$props2.zReverse);
    if ("rReverse" in $$props2)
      $$invalidate(142, rReverse = $$props2.rReverse);
    if ("padding" in $$props2)
      $$invalidate(143, padding = $$props2.padding);
    if ("extents" in $$props2)
      $$invalidate(144, extents = $$props2.extents);
    if ("flatData" in $$props2)
      $$invalidate(145, flatData = $$props2.flatData);
    if ("custom" in $$props2)
      $$invalidate(146, custom = $$props2.custom);
    if ("debug" in $$props2)
      $$invalidate(147, debug = $$props2.debug);
    if ("isMounted" in $$props2)
      isMounted = $$props2.isMounted;
    if ("context" in $$props2)
      $$invalidate(149, context = $$props2.context);
    if ("yReverseValue" in $$props2)
      $$invalidate(150, yReverseValue = $$props2.yReverseValue);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[4] & /*yReverse, yScale*/
    65792) {
      $:
        $$invalidate(150, yReverseValue = typeof yReverse === "undefined" ? typeof yScale.bandwidth === "function" ? false : true : yReverse);
    }
    if ($$self.$$.dirty[3] & /*x*/
    2097152) {
      $:
        if (x)
          $$invalidate(148, config.x = x, config);
    }
    if ($$self.$$.dirty[3] & /*y*/
    4194304) {
      $:
        if (y)
          $$invalidate(148, config.y = y, config);
    }
    if ($$self.$$.dirty[3] & /*z*/
    8388608) {
      $:
        if (z)
          $$invalidate(148, config.z = z, config);
    }
    if ($$self.$$.dirty[3] & /*r*/
    16777216) {
      $:
        if (r)
          $$invalidate(148, config.r = r, config);
    }
    if ($$self.$$.dirty[3] & /*xDomain*/
    67108864) {
      $:
        if (xDomain)
          $$invalidate(148, config.xDomain = xDomain, config);
    }
    if ($$self.$$.dirty[3] & /*yDomain*/
    134217728) {
      $:
        if (yDomain)
          $$invalidate(148, config.yDomain = yDomain, config);
    }
    if ($$self.$$.dirty[3] & /*zDomain*/
    268435456) {
      $:
        if (zDomain)
          $$invalidate(148, config.zDomain = zDomain, config);
    }
    if ($$self.$$.dirty[3] & /*rDomain*/
    536870912) {
      $:
        if (rDomain)
          $$invalidate(148, config.rDomain = rDomain, config);
    }
    if ($$self.$$.dirty[4] & /*xRange*/
    2048) {
      $:
        if (xRange)
          $$invalidate(148, config.xRange = xRange, config);
    }
    if ($$self.$$.dirty[4] & /*yRange*/
    4096) {
      $:
        if (yRange)
          $$invalidate(148, config.yRange = yRange, config);
    }
    if ($$self.$$.dirty[4] & /*zRange*/
    8192) {
      $:
        if (zRange)
          $$invalidate(148, config.zRange = zRange, config);
    }
    if ($$self.$$.dirty[4] & /*rRange*/
    16384) {
      $:
        if (rRange)
          $$invalidate(148, config.rRange = rRange, config);
    }
    if ($$self.$$.dirty[3] & /*percentRange*/
    262144) {
      $:
        set_store_value(_percentRange, $_percentRange = percentRange, $_percentRange);
    }
    if ($$self.$$.dirty[0] & /*containerWidth*/
    1) {
      $:
        set_store_value(_containerWidth, $_containerWidth = containerWidth, $_containerWidth);
    }
    if ($$self.$$.dirty[0] & /*containerHeight*/
    2) {
      $:
        set_store_value(_containerHeight, $_containerHeight = containerHeight, $_containerHeight);
    }
    if ($$self.$$.dirty[4] & /*extents*/
    1048576) {
      $:
        set_store_value(_extents, $_extents = filterObject(extents), $_extents);
    }
    if ($$self.$$.dirty[3] & /*data*/
    33554432) {
      $:
        set_store_value(_data, $_data = data, $_data);
    }
    if ($$self.$$.dirty[3] & /*data*/
    33554432 | $$self.$$.dirty[4] & /*flatData*/
    2097152) {
      $:
        set_store_value(_flatData, $_flatData = flatData || data, $_flatData);
    }
    if ($$self.$$.dirty[4] & /*padding*/
    524288) {
      $:
        set_store_value(_padding, $_padding = padding, $_padding);
    }
    if ($$self.$$.dirty[3] & /*x*/
    2097152) {
      $:
        set_store_value(_x, $_x = makeAccessor(x), $_x);
    }
    if ($$self.$$.dirty[3] & /*y*/
    4194304) {
      $:
        set_store_value(_y, $_y = makeAccessor(y), $_y);
    }
    if ($$self.$$.dirty[3] & /*z*/
    8388608) {
      $:
        set_store_value(_z, $_z = makeAccessor(z), $_z);
    }
    if ($$self.$$.dirty[3] & /*r*/
    16777216) {
      $:
        set_store_value(_r, $_r = makeAccessor(r), $_r);
    }
    if ($$self.$$.dirty[3] & /*xDomain*/
    67108864) {
      $:
        set_store_value(_xDomain, $_xDomain = xDomain, $_xDomain);
    }
    if ($$self.$$.dirty[3] & /*yDomain*/
    134217728) {
      $:
        set_store_value(_yDomain, $_yDomain = yDomain, $_yDomain);
    }
    if ($$self.$$.dirty[3] & /*zDomain*/
    268435456) {
      $:
        set_store_value(_zDomain, $_zDomain = zDomain, $_zDomain);
    }
    if ($$self.$$.dirty[3] & /*rDomain*/
    536870912) {
      $:
        set_store_value(_rDomain, $_rDomain = rDomain, $_rDomain);
    }
    if ($$self.$$.dirty[3] & /*xNice*/
    1073741824) {
      $:
        set_store_value(_xNice, $_xNice = xNice, $_xNice);
    }
    if ($$self.$$.dirty[4] & /*yNice*/
    1) {
      $:
        set_store_value(_yNice, $_yNice = yNice, $_yNice);
    }
    if ($$self.$$.dirty[4] & /*zNice*/
    2) {
      $:
        set_store_value(_zNice, $_zNice = zNice, $_zNice);
    }
    if ($$self.$$.dirty[4] & /*rNice*/
    4) {
      $:
        set_store_value(_rNice, $_rNice = rNice, $_rNice);
    }
    if ($$self.$$.dirty[4] & /*xReverse*/
    32768) {
      $:
        set_store_value(_xReverse, $_xReverse = xReverse, $_xReverse);
    }
    if ($$self.$$.dirty[4] & /*yReverseValue*/
    67108864) {
      $:
        set_store_value(_yReverse, $_yReverse = yReverseValue, $_yReverse);
    }
    if ($$self.$$.dirty[4] & /*zReverse*/
    131072) {
      $:
        set_store_value(_zReverse, $_zReverse = zReverse, $_zReverse);
    }
    if ($$self.$$.dirty[4] & /*rReverse*/
    262144) {
      $:
        set_store_value(_rReverse, $_rReverse = rReverse, $_rReverse);
    }
    if ($$self.$$.dirty[4] & /*xPadding*/
    8) {
      $:
        set_store_value(_xPadding, $_xPadding = xPadding, $_xPadding);
    }
    if ($$self.$$.dirty[4] & /*yPadding*/
    16) {
      $:
        set_store_value(_yPadding, $_yPadding = yPadding, $_yPadding);
    }
    if ($$self.$$.dirty[4] & /*zPadding*/
    32) {
      $:
        set_store_value(_zPadding, $_zPadding = zPadding, $_zPadding);
    }
    if ($$self.$$.dirty[4] & /*rPadding*/
    64) {
      $:
        set_store_value(_rPadding, $_rPadding = rPadding, $_rPadding);
    }
    if ($$self.$$.dirty[4] & /*xRange*/
    2048) {
      $:
        set_store_value(_xRange, $_xRange = xRange, $_xRange);
    }
    if ($$self.$$.dirty[4] & /*yRange*/
    4096) {
      $:
        set_store_value(_yRange, $_yRange = yRange, $_yRange);
    }
    if ($$self.$$.dirty[4] & /*zRange*/
    8192) {
      $:
        set_store_value(_zRange, $_zRange = zRange, $_zRange);
    }
    if ($$self.$$.dirty[4] & /*rRange*/
    16384) {
      $:
        set_store_value(_rRange, $_rRange = rRange, $_rRange);
    }
    if ($$self.$$.dirty[4] & /*xScale*/
    128) {
      $:
        set_store_value(_xScale, $_xScale = xScale, $_xScale);
    }
    if ($$self.$$.dirty[4] & /*yScale*/
    256) {
      $:
        set_store_value(_yScale, $_yScale = yScale, $_yScale);
    }
    if ($$self.$$.dirty[4] & /*zScale*/
    512) {
      $:
        set_store_value(_zScale, $_zScale = zScale, $_zScale);
    }
    if ($$self.$$.dirty[4] & /*rScale*/
    1024) {
      $:
        set_store_value(_rScale, $_rScale = rScale, $_rScale);
    }
    if ($$self.$$.dirty[4] & /*custom*/
    4194304) {
      $:
        set_store_value(_custom, $_custom = custom, $_custom);
    }
    if ($$self.$$.dirty[4] & /*config*/
    16777216) {
      $:
        set_store_value(_config, $_config = config, $_config);
    }
    if ($$self.$$.dirty[4] & /*context*/
    33554432) {
      $:
        setContext("LayerCake", context);
    }
    if ($$self.$$.dirty[0] & /*ssr, $activeGetters_d, $xScale_d, $yScale_d, $zScale_d, $rScale_d*/
    1992 | $$self.$$.dirty[4] & /*$box_d, debug, config*/
    159383552) {
      $:
        if ($box_d && debug === true && (ssr === true || typeof window !== "undefined")) {
          printDebug_debounced({
            boundingBox: $box_d,
            activeGetters: $activeGetters_d,
            x: config.x,
            y: config.y,
            z: config.z,
            r: config.r,
            xScale: $xScale_d,
            yScale: $yScale_d,
            zScale: $zScale_d,
            rScale: $rScale_d
          });
        }
    }
  };
  $:
    $$invalidate(149, context = {
      activeGetters: activeGetters_d,
      width: width_d,
      height: height_d,
      percentRange: _percentRange,
      aspectRatio: aspectRatio_d,
      containerWidth: _containerWidth,
      containerHeight: _containerHeight,
      x: _x,
      y: _y,
      z: _z,
      r: _r,
      custom: _custom,
      data: _data,
      xNice: _xNice,
      yNice: _yNice,
      zNice: _zNice,
      rNice: _rNice,
      xReverse: _xReverse,
      yReverse: _yReverse,
      zReverse: _zReverse,
      rReverse: _rReverse,
      xPadding: _xPadding,
      yPadding: _yPadding,
      zPadding: _zPadding,
      rPadding: _rPadding,
      padding: padding_d,
      flatData: _flatData,
      extents: extents_d,
      xDomain: xDomain_d,
      yDomain: yDomain_d,
      zDomain: zDomain_d,
      rDomain: rDomain_d,
      xRange: xRange_d,
      yRange: yRange_d,
      zRange: zRange_d,
      rRange: rRange_d,
      config: _config,
      xScale: xScale_d,
      xGet: xGet_d,
      yScale: yScale_d,
      yGet: yGet_d,
      zScale: zScale_d,
      zGet: zGet_d,
      rScale: rScale_d,
      rGet: rGet_d
    });
  return [
    containerWidth,
    containerHeight,
    element2,
    ssr,
    pointerEvents,
    position,
    $rScale_d,
    $zScale_d,
    $yScale_d,
    $xScale_d,
    $activeGetters_d,
    $_config,
    $_custom,
    $_rPadding,
    $_zPadding,
    $_yPadding,
    $_xPadding,
    $_rReverse,
    $_zReverse,
    $_yReverse,
    $_xReverse,
    $_rNice,
    $_zNice,
    $_yNice,
    $_xNice,
    $_r,
    $_z,
    $_y,
    $_x,
    $_flatData,
    $_data,
    $_containerHeight,
    $_containerWidth,
    $_percentRange,
    $width_d,
    $height_d,
    $aspectRatio_d,
    $padding_d,
    $extents_d,
    $xDomain_d,
    $yDomain_d,
    $zDomain_d,
    $rDomain_d,
    $xRange_d,
    $yRange_d,
    $zRange_d,
    $rRange_d,
    $xGet_d,
    $yGet_d,
    $zGet_d,
    $rGet_d,
    _percentRange,
    _containerWidth,
    _containerHeight,
    _extents,
    _data,
    _flatData,
    _padding,
    _x,
    _y,
    _z,
    _r,
    _xDomain,
    _yDomain,
    _zDomain,
    _rDomain,
    _xNice,
    _yNice,
    _zNice,
    _rNice,
    _xReverse,
    _yReverse,
    _zReverse,
    _rReverse,
    _xPadding,
    _yPadding,
    _zPadding,
    _rPadding,
    _xRange,
    _yRange,
    _zRange,
    _rRange,
    _xScale,
    _yScale,
    _zScale,
    _rScale,
    _config,
    _custom,
    activeGetters_d,
    padding_d,
    box_d,
    width_d,
    height_d,
    extents_d,
    xDomain_d,
    yDomain_d,
    zDomain_d,
    rDomain_d,
    xScale_d,
    xGet_d,
    yScale_d,
    yGet_d,
    zScale_d,
    zGet_d,
    rScale_d,
    rGet_d,
    xRange_d,
    yRange_d,
    zRange_d,
    rRange_d,
    aspectRatio_d,
    percentRange,
    width,
    height,
    x,
    y,
    z,
    r,
    data,
    xDomain,
    yDomain,
    zDomain,
    rDomain,
    xNice,
    yNice,
    zNice,
    rNice,
    xPadding,
    yPadding,
    zPadding,
    rPadding,
    xScale,
    yScale,
    zScale,
    rScale,
    xRange,
    yRange,
    zRange,
    rRange,
    xReverse,
    yReverse,
    zReverse,
    rReverse,
    padding,
    extents,
    flatData,
    custom,
    debug,
    config,
    context,
    yReverseValue,
    $box_d,
    $$scope,
    slots,
    div_binding,
    div_elementresize_handler
  ];
}
var LayerCake = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        ssr: 3,
        pointerEvents: 4,
        position: 5,
        percentRange: 111,
        width: 112,
        height: 113,
        containerWidth: 0,
        containerHeight: 1,
        element: 2,
        x: 114,
        y: 115,
        z: 116,
        r: 117,
        data: 118,
        xDomain: 119,
        yDomain: 120,
        zDomain: 121,
        rDomain: 122,
        xNice: 123,
        yNice: 124,
        zNice: 125,
        rNice: 126,
        xPadding: 127,
        yPadding: 128,
        zPadding: 129,
        rPadding: 130,
        xScale: 131,
        yScale: 132,
        zScale: 133,
        rScale: 134,
        xRange: 135,
        yRange: 136,
        zRange: 137,
        rRange: 138,
        xReverse: 139,
        yReverse: 140,
        zReverse: 141,
        rReverse: 142,
        padding: 143,
        extents: 144,
        flatData: 145,
        custom: 146,
        debug: 147
      },
      add_css,
      [-1, -1, -1, -1, -1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "LayerCake",
      options,
      id: create_fragment.name
    });
  }
  get ssr() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ssr(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pointerEvents() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pointerEvents(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get position() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set position(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get percentRange() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set percentRange(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get width() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set width(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get height() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set height(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get containerWidth() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set containerWidth(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get containerHeight() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set containerHeight(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get x() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set x(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get y() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set y(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get z() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set z(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get r() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set r(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get data() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xDomain() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xDomain(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yDomain() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yDomain(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zDomain() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zDomain(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rDomain() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rDomain(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xNice() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xNice(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yNice() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yNice(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zNice() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zNice(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rNice() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rNice(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xPadding() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xPadding(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yPadding() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yPadding(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zPadding() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zPadding(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rPadding() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rPadding(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xScale() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xScale(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yScale() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yScale(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zScale() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zScale(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rScale() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rScale(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xRange() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xRange(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yRange() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yRange(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zRange() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zRange(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rRange() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rRange(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xReverse() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xReverse(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yReverse() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yReverse(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zReverse() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zReverse(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rReverse() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rReverse(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get padding() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set padding(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get extents() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set extents(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get flatData() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set flatData(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get custom() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set custom(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get debug() {
    throw new Error("<LayerCake>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set debug(value) {
    throw new Error("<LayerCake>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var LayerCake_default = LayerCake;

// node_modules/layercake/dist/layouts/Html.svelte
var file2 = "node_modules/layercake/dist/layouts/Html.svelte";
function add_css2(target) {
  append_styles(target, "svelte-1bu60uu", "div.svelte-1bu60uu,slot.svelte-1bu60uu{position:absolute;top:0;left:0}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHRtbC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBbURDLHVDQUVDLGlCQUFrQixDQUNsQixLQUFNLENBQ04sTUFDRCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJIdG1sLnN2ZWx0ZSJdfQ== */");
}
var get_default_slot_changes2 = (dirty) => ({ element: dirty & /*element*/
1 });
var get_default_slot_context2 = (ctx) => ({ element: (
  /*element*/
  ctx[0]
) });
function create_fragment2(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[11].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[10],
    get_default_slot_context2
  );
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true,
        role: true,
        "aria-label": true,
        "aria-labelledby": true,
        "aria-describedby": true
      });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "layercake-layout-html svelte-1bu60uu");
      attr_dev(
        div,
        "role",
        /*roleVal*/
        ctx[6]
      );
      attr_dev(
        div,
        "aria-label",
        /*label*/
        ctx[3]
      );
      attr_dev(
        div,
        "aria-labelledby",
        /*labelledBy*/
        ctx[4]
      );
      attr_dev(
        div,
        "aria-describedby",
        /*describedBy*/
        ctx[5]
      );
      set_style(
        div,
        "z-index",
        /*zIndex*/
        ctx[1]
      );
      set_style(
        div,
        "pointer-events",
        /*pointerEvents*/
        ctx[2] === false ? "none" : null
      );
      set_style(
        div,
        "top",
        /*$padding*/
        ctx[7].top + "px"
      );
      set_style(
        div,
        "right",
        /*$padding*/
        ctx[7].right + "px"
      );
      set_style(
        div,
        "bottom",
        /*$padding*/
        ctx[7].bottom + "px"
      );
      set_style(
        div,
        "left",
        /*$padding*/
        ctx[7].left + "px"
      );
      add_location(div, file2, 33, 0, 1287);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[12](div);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, element*/
        1025)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[10],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[10]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[10],
              dirty,
              get_default_slot_changes2
            ),
            get_default_slot_context2
          );
        }
      }
      if (!current || dirty & /*roleVal*/
      64) {
        attr_dev(
          div,
          "role",
          /*roleVal*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*label*/
      8) {
        attr_dev(
          div,
          "aria-label",
          /*label*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*labelledBy*/
      16) {
        attr_dev(
          div,
          "aria-labelledby",
          /*labelledBy*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*describedBy*/
      32) {
        attr_dev(
          div,
          "aria-describedby",
          /*describedBy*/
          ctx2[5]
        );
      }
      if (dirty & /*zIndex*/
      2) {
        set_style(
          div,
          "z-index",
          /*zIndex*/
          ctx2[1]
        );
      }
      if (dirty & /*pointerEvents*/
      4) {
        set_style(
          div,
          "pointer-events",
          /*pointerEvents*/
          ctx2[2] === false ? "none" : null
        );
      }
      if (dirty & /*$padding*/
      128) {
        set_style(
          div,
          "top",
          /*$padding*/
          ctx2[7].top + "px"
        );
      }
      if (dirty & /*$padding*/
      128) {
        set_style(
          div,
          "right",
          /*$padding*/
          ctx2[7].right + "px"
        );
      }
      if (dirty & /*$padding*/
      128) {
        set_style(
          div,
          "bottom",
          /*$padding*/
          ctx2[7].bottom + "px"
        );
      }
      if (dirty & /*$padding*/
      128) {
        set_style(
          div,
          "left",
          /*$padding*/
          ctx2[7].left + "px"
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[12](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let roleVal;
  let $padding;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Html", slots, ["default"]);
  const { padding } = getContext("LayerCake");
  validate_store(padding, "padding");
  component_subscribe($$self, padding, (value) => $$invalidate(7, $padding = value));
  let { element: element2 = void 0 } = $$props;
  let { zIndex = void 0 } = $$props;
  let { pointerEvents = void 0 } = $$props;
  let { role = void 0 } = $$props;
  let { label = void 0 } = $$props;
  let { labelledBy = void 0 } = $$props;
  let { describedBy = void 0 } = $$props;
  const writable_props = [
    "element",
    "zIndex",
    "pointerEvents",
    "role",
    "label",
    "labelledBy",
    "describedBy"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Html> was created with unknown prop '${key}'`);
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(0, element2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(0, element2 = $$props2.element);
    if ("zIndex" in $$props2)
      $$invalidate(1, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(2, pointerEvents = $$props2.pointerEvents);
    if ("role" in $$props2)
      $$invalidate(9, role = $$props2.role);
    if ("label" in $$props2)
      $$invalidate(3, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(4, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(5, describedBy = $$props2.describedBy);
    if ("$$scope" in $$props2)
      $$invalidate(10, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    padding,
    element: element2,
    zIndex,
    pointerEvents,
    role,
    label,
    labelledBy,
    describedBy,
    roleVal,
    $padding
  });
  $$self.$inject_state = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(0, element2 = $$props2.element);
    if ("zIndex" in $$props2)
      $$invalidate(1, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(2, pointerEvents = $$props2.pointerEvents);
    if ("role" in $$props2)
      $$invalidate(9, role = $$props2.role);
    if ("label" in $$props2)
      $$invalidate(3, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(4, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(5, describedBy = $$props2.describedBy);
    if ("roleVal" in $$props2)
      $$invalidate(6, roleVal = $$props2.roleVal);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*role, label, labelledBy, describedBy*/
    568) {
      $:
        $$invalidate(6, roleVal = role || (label || labelledBy || describedBy ? "figure" : void 0));
    }
  };
  return [
    element2,
    zIndex,
    pointerEvents,
    label,
    labelledBy,
    describedBy,
    roleVal,
    $padding,
    padding,
    role,
    $$scope,
    slots,
    div_binding
  ];
}
var Html = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance2,
      create_fragment2,
      safe_not_equal,
      {
        element: 0,
        zIndex: 1,
        pointerEvents: 2,
        role: 9,
        label: 3,
        labelledBy: 4,
        describedBy: 5
      },
      add_css2
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Html",
      options,
      id: create_fragment2.name
    });
  }
  get element() {
    throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zIndex() {
    throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zIndex(value) {
    throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pointerEvents() {
    throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pointerEvents(value) {
    throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get role() {
    throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set role(value) {
    throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value) {
    throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get labelledBy() {
    throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set labelledBy(value) {
    throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get describedBy() {
    throw new Error("<Html>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set describedBy(value) {
    throw new Error("<Html>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Html_default = Html;

// node_modules/layercake/dist/layouts/Svg.svelte
var file3 = "node_modules/layercake/dist/layouts/Svg.svelte";
function add_css3(target) {
  append_styles(target, "svelte-u84d8d", "svg.svelte-u84d8d{position:absolute;top:0;left:0;overflow:visible}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3ZnLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUErREMsa0JBQ0MsaUJBQWtCLENBQ2xCLEtBQU0sQ0FDTixNQUFPLENBQ1AsZ0JBQ0QiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiU3ZnLnN2ZWx0ZSJdfQ== */");
}
var get_default_slot_changes3 = (dirty) => ({ element: dirty & /*element*/
1 });
var get_default_slot_context3 = (ctx) => ({ element: (
  /*element*/
  ctx[0]
) });
var get_defs_slot_changes = (dirty) => ({});
var get_defs_slot_context = (ctx) => ({});
var get_title_slot_changes = (dirty) => ({});
var get_title_slot_context = (ctx) => ({});
function create_if_block2(ctx) {
  let title_1;
  let t;
  const block = {
    c: function create() {
      title_1 = svg_element("title");
      t = text(
        /*title*/
        ctx[8]
      );
      this.h();
    },
    l: function claim(nodes) {
      title_1 = claim_svg_element(nodes, "title", {});
      var title_1_nodes = children(title_1);
      t = claim_text(
        title_1_nodes,
        /*title*/
        ctx[8]
      );
      title_1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(title_1, file3, 49, 31, 1797);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, title_1, anchor);
      append_hydration_dev(title_1, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*title*/
      256)
        set_data_dev(
          t,
          /*title*/
          ctx2[8]
        );
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(title_1);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(50:20) {#if title}",
    ctx
  });
  return block;
}
function fallback_block(ctx) {
  let if_block_anchor;
  let if_block = (
    /*title*/
    ctx[8] && create_if_block2(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (
        /*title*/
        ctx2[8]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block.name,
    type: "fallback",
    source: "(50:20) {#if title}",
    ctx
  });
  return block;
}
function create_fragment3(ctx) {
  let svg;
  let defs;
  let g;
  let g_transform_value;
  let current;
  const title_slot_template = (
    /*#slots*/
    ctx[16].title
  );
  const title_slot = create_slot(
    title_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    get_title_slot_context
  );
  const title_slot_or_fallback = title_slot || fallback_block(ctx);
  const defs_slot_template = (
    /*#slots*/
    ctx[16].defs
  );
  const defs_slot = create_slot(
    defs_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    get_defs_slot_context
  );
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    get_default_slot_context3
  );
  const block = {
    c: function create() {
      svg = svg_element("svg");
      if (title_slot_or_fallback)
        title_slot_or_fallback.c();
      defs = svg_element("defs");
      if (defs_slot)
        defs_slot.c();
      g = svg_element("g");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      svg = claim_svg_element(nodes, "svg", {
        class: true,
        viewBox: true,
        width: true,
        height: true,
        "aria-label": true,
        "aria-labelledby": true,
        "aria-describedby": true
      });
      var svg_nodes = children(svg);
      if (title_slot_or_fallback)
        title_slot_or_fallback.l(svg_nodes);
      defs = claim_svg_element(svg_nodes, "defs", {});
      var defs_nodes = children(defs);
      if (defs_slot)
        defs_slot.l(defs_nodes);
      defs_nodes.forEach(detach_dev);
      g = claim_svg_element(svg_nodes, "g", { class: true, transform: true });
      var g_nodes = children(g);
      if (default_slot)
        default_slot.l(g_nodes);
      g_nodes.forEach(detach_dev);
      svg_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(defs, file3, 51, 1, 1834);
      attr_dev(g, "class", "layercake-layout-svg_g");
      attr_dev(g, "transform", g_transform_value = "translate(" + /*$padding*/
      ctx[11].left + ", " + /*$padding*/
      ctx[11].top + ")");
      add_location(g, file3, 54, 1, 1879);
      attr_dev(svg, "class", "layercake-layout-svg svelte-u84d8d");
      attr_dev(
        svg,
        "viewBox",
        /*viewBox*/
        ctx[4]
      );
      attr_dev(
        svg,
        "width",
        /*$containerWidth*/
        ctx[9]
      );
      attr_dev(
        svg,
        "height",
        /*$containerHeight*/
        ctx[10]
      );
      attr_dev(
        svg,
        "aria-label",
        /*label*/
        ctx[5]
      );
      attr_dev(
        svg,
        "aria-labelledby",
        /*labelledBy*/
        ctx[6]
      );
      attr_dev(
        svg,
        "aria-describedby",
        /*describedBy*/
        ctx[7]
      );
      set_style(
        svg,
        "z-index",
        /*zIndex*/
        ctx[2]
      );
      set_style(
        svg,
        "pointer-events",
        /*pointerEvents*/
        ctx[3] === false ? "none" : null
      );
      add_location(svg, file3, 37, 0, 1475);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, svg, anchor);
      if (title_slot_or_fallback) {
        title_slot_or_fallback.m(svg, null);
      }
      append_hydration_dev(svg, defs);
      if (defs_slot) {
        defs_slot.m(defs, null);
      }
      append_hydration_dev(svg, g);
      if (default_slot) {
        default_slot.m(g, null);
      }
      ctx[17](g);
      ctx[18](svg);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (title_slot) {
        if (title_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            title_slot,
            title_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              title_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              get_title_slot_changes
            ),
            get_title_slot_context
          );
        }
      } else {
        if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty & /*title*/
        256)) {
          title_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (defs_slot) {
        if (defs_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            defs_slot,
            defs_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              defs_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              get_defs_slot_changes
            ),
            get_defs_slot_context
          );
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, element*/
        32769)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              get_default_slot_changes3
            ),
            get_default_slot_context3
          );
        }
      }
      if (!current || dirty & /*$padding*/
      2048 && g_transform_value !== (g_transform_value = "translate(" + /*$padding*/
      ctx2[11].left + ", " + /*$padding*/
      ctx2[11].top + ")")) {
        attr_dev(g, "transform", g_transform_value);
      }
      if (!current || dirty & /*viewBox*/
      16) {
        attr_dev(
          svg,
          "viewBox",
          /*viewBox*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*$containerWidth*/
      512) {
        attr_dev(
          svg,
          "width",
          /*$containerWidth*/
          ctx2[9]
        );
      }
      if (!current || dirty & /*$containerHeight*/
      1024) {
        attr_dev(
          svg,
          "height",
          /*$containerHeight*/
          ctx2[10]
        );
      }
      if (!current || dirty & /*label*/
      32) {
        attr_dev(
          svg,
          "aria-label",
          /*label*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*labelledBy*/
      64) {
        attr_dev(
          svg,
          "aria-labelledby",
          /*labelledBy*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*describedBy*/
      128) {
        attr_dev(
          svg,
          "aria-describedby",
          /*describedBy*/
          ctx2[7]
        );
      }
      if (dirty & /*zIndex*/
      4) {
        set_style(
          svg,
          "z-index",
          /*zIndex*/
          ctx2[2]
        );
      }
      if (dirty & /*pointerEvents*/
      8) {
        set_style(
          svg,
          "pointer-events",
          /*pointerEvents*/
          ctx2[3] === false ? "none" : null
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(title_slot_or_fallback, local);
      transition_in(defs_slot, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(title_slot_or_fallback, local);
      transition_out(defs_slot, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(svg);
      }
      if (title_slot_or_fallback)
        title_slot_or_fallback.d(detaching);
      if (defs_slot)
        defs_slot.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
      ctx[17](null);
      ctx[18](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let $containerWidth;
  let $containerHeight;
  let $padding;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Svg", slots, ["title", "defs", "default"]);
  let { element: element2 = void 0 } = $$props;
  let { innerElement = void 0 } = $$props;
  let { zIndex = void 0 } = $$props;
  let { pointerEvents = void 0 } = $$props;
  let { viewBox = void 0 } = $$props;
  let { label = void 0 } = $$props;
  let { labelledBy = void 0 } = $$props;
  let { describedBy = void 0 } = $$props;
  let { title = void 0 } = $$props;
  const { containerWidth, containerHeight, padding } = getContext("LayerCake");
  validate_store(containerWidth, "containerWidth");
  component_subscribe($$self, containerWidth, (value) => $$invalidate(9, $containerWidth = value));
  validate_store(containerHeight, "containerHeight");
  component_subscribe($$self, containerHeight, (value) => $$invalidate(10, $containerHeight = value));
  validate_store(padding, "padding");
  component_subscribe($$self, padding, (value) => $$invalidate(11, $padding = value));
  const writable_props = [
    "element",
    "innerElement",
    "zIndex",
    "pointerEvents",
    "viewBox",
    "label",
    "labelledBy",
    "describedBy",
    "title"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Svg> was created with unknown prop '${key}'`);
  });
  function g_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      innerElement = $$value;
      $$invalidate(1, innerElement);
    });
  }
  function svg_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(0, element2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(0, element2 = $$props2.element);
    if ("innerElement" in $$props2)
      $$invalidate(1, innerElement = $$props2.innerElement);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("viewBox" in $$props2)
      $$invalidate(4, viewBox = $$props2.viewBox);
    if ("label" in $$props2)
      $$invalidate(5, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(6, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(7, describedBy = $$props2.describedBy);
    if ("title" in $$props2)
      $$invalidate(8, title = $$props2.title);
    if ("$$scope" in $$props2)
      $$invalidate(15, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    element: element2,
    innerElement,
    zIndex,
    pointerEvents,
    viewBox,
    label,
    labelledBy,
    describedBy,
    title,
    containerWidth,
    containerHeight,
    padding,
    $containerWidth,
    $containerHeight,
    $padding
  });
  $$self.$inject_state = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(0, element2 = $$props2.element);
    if ("innerElement" in $$props2)
      $$invalidate(1, innerElement = $$props2.innerElement);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("viewBox" in $$props2)
      $$invalidate(4, viewBox = $$props2.viewBox);
    if ("label" in $$props2)
      $$invalidate(5, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(6, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(7, describedBy = $$props2.describedBy);
    if ("title" in $$props2)
      $$invalidate(8, title = $$props2.title);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    element2,
    innerElement,
    zIndex,
    pointerEvents,
    viewBox,
    label,
    labelledBy,
    describedBy,
    title,
    $containerWidth,
    $containerHeight,
    $padding,
    containerWidth,
    containerHeight,
    padding,
    $$scope,
    slots,
    g_binding,
    svg_binding
  ];
}
var Svg = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance3,
      create_fragment3,
      safe_not_equal,
      {
        element: 0,
        innerElement: 1,
        zIndex: 2,
        pointerEvents: 3,
        viewBox: 4,
        label: 5,
        labelledBy: 6,
        describedBy: 7,
        title: 8
      },
      add_css3
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Svg",
      options,
      id: create_fragment3.name
    });
  }
  get element() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get innerElement() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set innerElement(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zIndex() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zIndex(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pointerEvents() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pointerEvents(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get viewBox() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set viewBox(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get labelledBy() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set labelledBy(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get describedBy() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set describedBy(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value) {
    throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Svg_default = Svg;

// node_modules/layercake/dist/layouts/ScaledSvg.svelte
var file4 = "node_modules/layercake/dist/layouts/ScaledSvg.svelte";
function add_css4(target) {
  append_styles(target, "svelte-6sm8ei", "svg.svelte-6sm8ei{position:absolute;width:100%;height:100%;overflow:visible}svg.svelte-6sm8ei *{vector-effect:non-scaling-stroke}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NhbGVkU3ZnLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUErREMsa0JBQ0MsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxXQUFZLENBQ1osZ0JBQ0QsQ0FDQSxvQkFDQyxnQ0FDRCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJTY2FsZWRTdmcuc3ZlbHRlIl19 */");
}
var get_default_slot_changes4 = (dirty) => ({ element: dirty & /*element*/
1 });
var get_default_slot_context4 = (ctx) => ({ element: (
  /*element*/
  ctx[0]
) });
var get_defs_slot_changes2 = (dirty) => ({});
var get_defs_slot_context2 = (ctx) => ({});
var get_title_slot_changes2 = (dirty) => ({});
var get_title_slot_context2 = (ctx) => ({});
function create_if_block3(ctx) {
  let title_1;
  let t;
  const block = {
    c: function create() {
      title_1 = svg_element("title");
      t = text(
        /*title*/
        ctx[7]
      );
      this.h();
    },
    l: function claim(nodes) {
      title_1 = claim_svg_element(nodes, "title", {});
      var title_1_nodes = children(title_1);
      t = claim_text(
        title_1_nodes,
        /*title*/
        ctx[7]
      );
      title_1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(title_1, file4, 53, 31, 2054);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, title_1, anchor);
      append_hydration_dev(title_1, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*title*/
      128)
        set_data_dev(
          t,
          /*title*/
          ctx2[7]
        );
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(title_1);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block3.name,
    type: "if",
    source: "(54:20) {#if title}",
    ctx
  });
  return block;
}
function fallback_block2(ctx) {
  let if_block_anchor;
  let if_block = (
    /*title*/
    ctx[7] && create_if_block3(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (
        /*title*/
        ctx2[7]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block3(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block2.name,
    type: "fallback",
    source: "(54:20) {#if title}",
    ctx
  });
  return block;
}
function create_fragment4(ctx) {
  let svg;
  let defs;
  let current;
  const title_slot_template = (
    /*#slots*/
    ctx[12].title
  );
  const title_slot = create_slot(
    title_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_title_slot_context2
  );
  const title_slot_or_fallback = title_slot || fallback_block2(ctx);
  const defs_slot_template = (
    /*#slots*/
    ctx[12].defs
  );
  const defs_slot = create_slot(
    defs_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_defs_slot_context2
  );
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_default_slot_context4
  );
  const block = {
    c: function create() {
      svg = svg_element("svg");
      if (title_slot_or_fallback)
        title_slot_or_fallback.c();
      defs = svg_element("defs");
      if (defs_slot)
        defs_slot.c();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      svg = claim_svg_element(nodes, "svg", {
        viewBox: true,
        preserveAspectRatio: true,
        style: true,
        "aria-label": true,
        "aria-labelledby": true,
        "aria-describedby": true,
        class: true
      });
      var svg_nodes = children(svg);
      if (title_slot_or_fallback)
        title_slot_or_fallback.l(svg_nodes);
      defs = claim_svg_element(svg_nodes, "defs", {});
      var defs_nodes = children(defs);
      if (defs_slot)
        defs_slot.l(defs_nodes);
      defs_nodes.forEach(detach_dev);
      if (default_slot)
        default_slot.l(svg_nodes);
      svg_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(defs, file4, 55, 1, 2091);
      attr_dev(
        svg,
        "viewBox",
        /*viewBox*/
        ctx[1]
      );
      attr_dev(svg, "preserveAspectRatio", "none");
      set_style(svg, "right", "0px");
      set_style(svg, "bottom", "0px");
      attr_dev(
        svg,
        "aria-label",
        /*label*/
        ctx[4]
      );
      attr_dev(
        svg,
        "aria-labelledby",
        /*labelledBy*/
        ctx[5]
      );
      attr_dev(
        svg,
        "aria-describedby",
        /*describedBy*/
        ctx[6]
      );
      attr_dev(svg, "class", "svelte-6sm8ei");
      set_style(
        svg,
        "z-index",
        /*zIndex*/
        ctx[2]
      );
      set_style(
        svg,
        "pointer-events",
        /*pointerEvents*/
        ctx[3] === false ? "none" : null
      );
      set_style(
        svg,
        "top",
        /*$padding*/
        ctx[8].top + "px"
      );
      set_style(
        svg,
        "left",
        /*$padding*/
        ctx[8].left + "px"
      );
      set_style(svg, "width", `calc(100% - ${/*$padding*/
      ctx[8].left + /*$padding*/
      ctx[8].right}px)`);
      set_style(svg, "height", `calc(100% - ${/*$padding*/
      ctx[8].top + /*$padding*/
      ctx[8].bottom}px)`);
      add_location(svg, file4, 38, 0, 1549);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, svg, anchor);
      if (title_slot_or_fallback) {
        title_slot_or_fallback.m(svg, null);
      }
      append_hydration_dev(svg, defs);
      if (defs_slot) {
        defs_slot.m(defs, null);
      }
      if (default_slot) {
        default_slot.m(svg, null);
      }
      ctx[13](svg);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (title_slot) {
        if (title_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            title_slot,
            title_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              title_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_title_slot_changes2
            ),
            get_title_slot_context2
          );
        }
      } else {
        if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty & /*title*/
        128)) {
          title_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (defs_slot) {
        if (defs_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            defs_slot,
            defs_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              defs_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_defs_slot_changes2
            ),
            get_defs_slot_context2
          );
        }
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, element*/
        2049)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_default_slot_changes4
            ),
            get_default_slot_context4
          );
        }
      }
      if (!current || dirty & /*viewBox*/
      2) {
        attr_dev(
          svg,
          "viewBox",
          /*viewBox*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*label*/
      16) {
        attr_dev(
          svg,
          "aria-label",
          /*label*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*labelledBy*/
      32) {
        attr_dev(
          svg,
          "aria-labelledby",
          /*labelledBy*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*describedBy*/
      64) {
        attr_dev(
          svg,
          "aria-describedby",
          /*describedBy*/
          ctx2[6]
        );
      }
      if (dirty & /*zIndex*/
      4) {
        set_style(
          svg,
          "z-index",
          /*zIndex*/
          ctx2[2]
        );
      }
      if (dirty & /*pointerEvents*/
      8) {
        set_style(
          svg,
          "pointer-events",
          /*pointerEvents*/
          ctx2[3] === false ? "none" : null
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          svg,
          "top",
          /*$padding*/
          ctx2[8].top + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          svg,
          "left",
          /*$padding*/
          ctx2[8].left + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(svg, "width", `calc(100% - ${/*$padding*/
        ctx2[8].left + /*$padding*/
        ctx2[8].right}px)`);
      }
      if (dirty & /*$padding*/
      256) {
        set_style(svg, "height", `calc(100% - ${/*$padding*/
        ctx2[8].top + /*$padding*/
        ctx2[8].bottom}px)`);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(title_slot_or_fallback, local);
      transition_in(defs_slot, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(title_slot_or_fallback, local);
      transition_out(defs_slot, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(svg);
      }
      if (title_slot_or_fallback)
        title_slot_or_fallback.d(detaching);
      if (defs_slot)
        defs_slot.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
      ctx[13](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance4($$self, $$props, $$invalidate) {
  let $padding;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ScaledSvg", slots, ["title", "defs", "default"]);
  const { padding } = getContext("LayerCake");
  validate_store(padding, "padding");
  component_subscribe($$self, padding, (value) => $$invalidate(8, $padding = value));
  let { element: element2 = void 0 } = $$props;
  let { zIndex = void 0 } = $$props;
  let { pointerEvents = void 0 } = $$props;
  let { fixedAspectRatio = 1 } = $$props;
  let { viewBox = `0 0 100 ${100 / fixedAspectRatio}` } = $$props;
  let { label = void 0 } = $$props;
  let { labelledBy = void 0 } = $$props;
  let { describedBy = void 0 } = $$props;
  let { title = void 0 } = $$props;
  const writable_props = [
    "element",
    "zIndex",
    "pointerEvents",
    "fixedAspectRatio",
    "viewBox",
    "label",
    "labelledBy",
    "describedBy",
    "title"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ScaledSvg> was created with unknown prop '${key}'`);
  });
  function svg_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(0, element2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(0, element2 = $$props2.element);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("fixedAspectRatio" in $$props2)
      $$invalidate(10, fixedAspectRatio = $$props2.fixedAspectRatio);
    if ("viewBox" in $$props2)
      $$invalidate(1, viewBox = $$props2.viewBox);
    if ("label" in $$props2)
      $$invalidate(4, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(5, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(6, describedBy = $$props2.describedBy);
    if ("title" in $$props2)
      $$invalidate(7, title = $$props2.title);
    if ("$$scope" in $$props2)
      $$invalidate(11, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    padding,
    element: element2,
    zIndex,
    pointerEvents,
    fixedAspectRatio,
    viewBox,
    label,
    labelledBy,
    describedBy,
    title,
    $padding
  });
  $$self.$inject_state = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(0, element2 = $$props2.element);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("fixedAspectRatio" in $$props2)
      $$invalidate(10, fixedAspectRatio = $$props2.fixedAspectRatio);
    if ("viewBox" in $$props2)
      $$invalidate(1, viewBox = $$props2.viewBox);
    if ("label" in $$props2)
      $$invalidate(4, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(5, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(6, describedBy = $$props2.describedBy);
    if ("title" in $$props2)
      $$invalidate(7, title = $$props2.title);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*fixedAspectRatio*/
    1024) {
      $:
        $$invalidate(1, viewBox = `0 0 100 ${100 / fixedAspectRatio}`);
    }
  };
  return [
    element2,
    viewBox,
    zIndex,
    pointerEvents,
    label,
    labelledBy,
    describedBy,
    title,
    $padding,
    padding,
    fixedAspectRatio,
    $$scope,
    slots,
    svg_binding
  ];
}
var ScaledSvg = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance4,
      create_fragment4,
      safe_not_equal,
      {
        element: 0,
        zIndex: 2,
        pointerEvents: 3,
        fixedAspectRatio: 10,
        viewBox: 1,
        label: 4,
        labelledBy: 5,
        describedBy: 6,
        title: 7
      },
      add_css4
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ScaledSvg",
      options,
      id: create_fragment4.name
    });
  }
  get element() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zIndex() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zIndex(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pointerEvents() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pointerEvents(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fixedAspectRatio() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fixedAspectRatio(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get viewBox() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set viewBox(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get labelledBy() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set labelledBy(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get describedBy() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set describedBy(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<ScaledSvg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value) {
    throw new Error("<ScaledSvg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ScaledSvg_default = ScaledSvg;

// node_modules/layercake/dist/lib/scaleCanvas.js
function scaleCanvas_default(ctx, width, height) {
  const dpr = window.devicePixelRatio || 1;
  ctx.canvas.width = width * dpr;
  ctx.canvas.height = height * dpr;
  ctx.canvas.style.width = `${width}px`;
  ctx.canvas.style.height = `${height}px`;
  ctx.scale(dpr, dpr);
  return { width: ctx.canvas.width, height: ctx.canvas.height };
}

// node_modules/layercake/dist/layouts/Canvas.svelte
var file5 = "node_modules/layercake/dist/layouts/Canvas.svelte";
var get_default_slot_changes5 = (dirty) => ({
  element: dirty & /*element*/
  2,
  context: dirty & /*context*/
  1
});
var get_default_slot_context5 = (ctx) => ({
  element: (
    /*element*/
    ctx[1]
  ),
  context: (
    /*context*/
    ctx[0]
  )
});
var get_fallback_slot_changes = (dirty) => ({});
var get_fallback_slot_context = (ctx) => ({});
function create_if_block4(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
        /*fallback*/
        ctx[4]
      );
    },
    l: function claim(nodes) {
      t = claim_text(
        nodes,
        /*fallback*/
        ctx[4]
      );
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*fallback*/
      16)
        set_data_dev(
          t,
          /*fallback*/
          ctx2[4]
        );
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block4.name,
    type: "if",
    source: "(62:23) {#if fallback}",
    ctx
  });
  return block;
}
function fallback_block3(ctx) {
  let if_block_anchor;
  let if_block = (
    /*fallback*/
    ctx[4] && create_if_block4(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (
        /*fallback*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block4(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block3.name,
    type: "fallback",
    source: "(62:23) {#if fallback}",
    ctx
  });
  return block;
}
function create_fragment5(ctx) {
  let canvas;
  let t;
  let current;
  const fallback_slot_template = (
    /*#slots*/
    ctx[13].fallback
  );
  const fallback_slot = create_slot(
    fallback_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    get_fallback_slot_context
  );
  const fallback_slot_or_fallback = fallback_slot || fallback_block3(ctx);
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    get_default_slot_context5
  );
  const block = {
    c: function create() {
      canvas = element("canvas");
      if (fallback_slot_or_fallback)
        fallback_slot_or_fallback.c();
      t = space();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      canvas = claim_element(nodes, "CANVAS", {
        class: true,
        style: true,
        "aria-label": true,
        "aria-labelledby": true,
        "aria-describedby": true
      });
      var canvas_nodes = children(canvas);
      if (fallback_slot_or_fallback)
        fallback_slot_or_fallback.l(canvas_nodes);
      canvas_nodes.forEach(detach_dev);
      t = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
      this.h();
    },
    h: function hydrate() {
      attr_dev(canvas, "class", "layercake-layout-canvas");
      set_style(canvas, "width", "100%");
      set_style(canvas, "height", "100%");
      set_style(canvas, "position", "absolute");
      attr_dev(
        canvas,
        "aria-label",
        /*label*/
        ctx[5]
      );
      attr_dev(
        canvas,
        "aria-labelledby",
        /*labelledBy*/
        ctx[6]
      );
      attr_dev(
        canvas,
        "aria-describedby",
        /*describedBy*/
        ctx[7]
      );
      set_style(
        canvas,
        "z-index",
        /*zIndex*/
        ctx[2]
      );
      set_style(
        canvas,
        "pointer-events",
        /*pointerEvents*/
        ctx[3] === false ? "none" : null
      );
      set_style(
        canvas,
        "top",
        /*$padding*/
        ctx[8].top + "px"
      );
      set_style(
        canvas,
        "right",
        /*$padding*/
        ctx[8].right + "px"
      );
      set_style(
        canvas,
        "bottom",
        /*$padding*/
        ctx[8].bottom + "px"
      );
      set_style(
        canvas,
        "left",
        /*$padding*/
        ctx[8].left + "px"
      );
      add_location(canvas, file5, 48, 0, 1649);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, canvas, anchor);
      if (fallback_slot_or_fallback) {
        fallback_slot_or_fallback.m(canvas, null);
      }
      ctx[14](canvas);
      insert_hydration_dev(target, t, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (fallback_slot) {
        if (fallback_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            fallback_slot,
            fallback_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              fallback_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              get_fallback_slot_changes
            ),
            get_fallback_slot_context
          );
        }
      } else {
        if (fallback_slot_or_fallback && fallback_slot_or_fallback.p && (!current || dirty & /*fallback*/
        16)) {
          fallback_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (!current || dirty & /*label*/
      32) {
        attr_dev(
          canvas,
          "aria-label",
          /*label*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*labelledBy*/
      64) {
        attr_dev(
          canvas,
          "aria-labelledby",
          /*labelledBy*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*describedBy*/
      128) {
        attr_dev(
          canvas,
          "aria-describedby",
          /*describedBy*/
          ctx2[7]
        );
      }
      if (dirty & /*zIndex*/
      4) {
        set_style(
          canvas,
          "z-index",
          /*zIndex*/
          ctx2[2]
        );
      }
      if (dirty & /*pointerEvents*/
      8) {
        set_style(
          canvas,
          "pointer-events",
          /*pointerEvents*/
          ctx2[3] === false ? "none" : null
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "top",
          /*$padding*/
          ctx2[8].top + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "right",
          /*$padding*/
          ctx2[8].right + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "bottom",
          /*$padding*/
          ctx2[8].bottom + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "left",
          /*$padding*/
          ctx2[8].left + "px"
        );
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, element, context*/
        4099)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              get_default_slot_changes5
            ),
            get_default_slot_context5
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(fallback_slot_or_fallback, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(fallback_slot_or_fallback, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(canvas);
        detach_dev(t);
      }
      if (fallback_slot_or_fallback)
        fallback_slot_or_fallback.d(detaching);
      ctx[14](null);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment5.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance5($$self, $$props, $$invalidate) {
  let $height;
  let $width;
  let $padding;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Canvas", slots, ["fallback", "default"]);
  const { width, height, padding } = getContext("LayerCake");
  validate_store(width, "width");
  component_subscribe($$self, width, (value) => $$invalidate(16, $width = value));
  validate_store(height, "height");
  component_subscribe($$self, height, (value) => $$invalidate(15, $height = value));
  validate_store(padding, "padding");
  component_subscribe($$self, padding, (value) => $$invalidate(8, $padding = value));
  let { element: element2 = void 0 } = $$props;
  let { context = void 0 } = $$props;
  let { zIndex = void 0 } = $$props;
  let { pointerEvents = void 0 } = $$props;
  let { fallback = "" } = $$props;
  let { label = void 0 } = $$props;
  let { labelledBy = void 0 } = $$props;
  let { describedBy = void 0 } = $$props;
  const cntxt = { ctx: writable({}) };
  onMount(() => {
    $$invalidate(0, context = element2.getContext("2d"));
    scaleCanvas_default(context, $width, $height);
  });
  setContext("canvas", cntxt);
  const writable_props = [
    "element",
    "context",
    "zIndex",
    "pointerEvents",
    "fallback",
    "label",
    "labelledBy",
    "describedBy"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Canvas> was created with unknown prop '${key}'`);
  });
  function canvas_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(1, element2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(1, element2 = $$props2.element);
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("fallback" in $$props2)
      $$invalidate(4, fallback = $$props2.fallback);
    if ("label" in $$props2)
      $$invalidate(5, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(6, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(7, describedBy = $$props2.describedBy);
    if ("$$scope" in $$props2)
      $$invalidate(12, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    onMount,
    setContext,
    writable,
    scaleCanvas: scaleCanvas_default,
    width,
    height,
    padding,
    element: element2,
    context,
    zIndex,
    pointerEvents,
    fallback,
    label,
    labelledBy,
    describedBy,
    cntxt,
    $height,
    $width,
    $padding
  });
  $$self.$inject_state = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(1, element2 = $$props2.element);
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("fallback" in $$props2)
      $$invalidate(4, fallback = $$props2.fallback);
    if ("label" in $$props2)
      $$invalidate(5, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(6, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(7, describedBy = $$props2.describedBy);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*context*/
    1) {
      $:
        cntxt.ctx.set(context);
    }
  };
  return [
    context,
    element2,
    zIndex,
    pointerEvents,
    fallback,
    label,
    labelledBy,
    describedBy,
    $padding,
    width,
    height,
    padding,
    $$scope,
    slots,
    canvas_binding
  ];
}
var Canvas = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance5, create_fragment5, safe_not_equal, {
      element: 1,
      context: 0,
      zIndex: 2,
      pointerEvents: 3,
      fallback: 4,
      label: 5,
      labelledBy: 6,
      describedBy: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Canvas",
      options,
      id: create_fragment5.name
    });
  }
  get element() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get context() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set context(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zIndex() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zIndex(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pointerEvents() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pointerEvents(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fallback() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fallback(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get labelledBy() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set labelledBy(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get describedBy() {
    throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set describedBy(value) {
    throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Canvas_default = Canvas;

// node_modules/layercake/dist/layouts/Webgl.svelte
var file6 = "node_modules/layercake/dist/layouts/Webgl.svelte";
var get_default_slot_changes6 = (dirty) => ({
  element: dirty & /*element*/
  2,
  context: dirty & /*context*/
  1
});
var get_default_slot_context6 = (ctx) => ({
  element: (
    /*element*/
    ctx[1]
  ),
  context: (
    /*context*/
    ctx[0]
  )
});
var get_fallback_slot_changes2 = (dirty) => ({});
var get_fallback_slot_context2 = (ctx) => ({});
function create_if_block5(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
        /*fallback*/
        ctx[4]
      );
    },
    l: function claim(nodes) {
      t = claim_text(
        nodes,
        /*fallback*/
        ctx[4]
      );
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*fallback*/
      16)
        set_data_dev(
          t,
          /*fallback*/
          ctx2[4]
        );
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block5.name,
    type: "if",
    source: "(76:23) {#if fallback}",
    ctx
  });
  return block;
}
function fallback_block4(ctx) {
  let if_block_anchor;
  let if_block = (
    /*fallback*/
    ctx[4] && create_if_block5(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (
        /*fallback*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block5(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: fallback_block4.name,
    type: "fallback",
    source: "(76:23) {#if fallback}",
    ctx
  });
  return block;
}
function create_fragment6(ctx) {
  let canvas;
  let t;
  let current;
  const fallback_slot_template = (
    /*#slots*/
    ctx[12].fallback
  );
  const fallback_slot = create_slot(
    fallback_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_fallback_slot_context2
  );
  const fallback_slot_or_fallback = fallback_slot || fallback_block4(ctx);
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    get_default_slot_context6
  );
  const block = {
    c: function create() {
      canvas = element("canvas");
      if (fallback_slot_or_fallback)
        fallback_slot_or_fallback.c();
      t = space();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      canvas = claim_element(nodes, "CANVAS", {
        class: true,
        style: true,
        "aria-label": true,
        "aria-labelledby": true,
        "aria-describedby": true
      });
      var canvas_nodes = children(canvas);
      if (fallback_slot_or_fallback)
        fallback_slot_or_fallback.l(canvas_nodes);
      canvas_nodes.forEach(detach_dev);
      t = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
      this.h();
    },
    h: function hydrate() {
      attr_dev(canvas, "class", "layercake-layout-webgl");
      set_style(canvas, "width", "100%");
      set_style(canvas, "height", "100%");
      set_style(canvas, "position", "absolute");
      attr_dev(
        canvas,
        "aria-label",
        /*label*/
        ctx[5]
      );
      attr_dev(
        canvas,
        "aria-labelledby",
        /*labelledBy*/
        ctx[6]
      );
      attr_dev(
        canvas,
        "aria-describedby",
        /*describedBy*/
        ctx[7]
      );
      set_style(
        canvas,
        "z-index",
        /*zIndex*/
        ctx[2]
      );
      set_style(
        canvas,
        "pointer-events",
        /*pointerEvents*/
        ctx[3] === false ? "none" : null
      );
      set_style(
        canvas,
        "top",
        /*$padding*/
        ctx[8].top + "px"
      );
      set_style(
        canvas,
        "right",
        /*$padding*/
        ctx[8].right + "px"
      );
      set_style(
        canvas,
        "bottom",
        /*$padding*/
        ctx[8].bottom + "px"
      );
      set_style(
        canvas,
        "left",
        /*$padding*/
        ctx[8].left + "px"
      );
      add_location(canvas, file6, 62, 0, 2147);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, canvas, anchor);
      if (fallback_slot_or_fallback) {
        fallback_slot_or_fallback.m(canvas, null);
      }
      ctx[13](canvas);
      insert_hydration_dev(target, t, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (fallback_slot) {
        if (fallback_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            fallback_slot,
            fallback_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              fallback_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_fallback_slot_changes2
            ),
            get_fallback_slot_context2
          );
        }
      } else {
        if (fallback_slot_or_fallback && fallback_slot_or_fallback.p && (!current || dirty & /*fallback*/
        16)) {
          fallback_slot_or_fallback.p(ctx2, !current ? -1 : dirty);
        }
      }
      if (!current || dirty & /*label*/
      32) {
        attr_dev(
          canvas,
          "aria-label",
          /*label*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*labelledBy*/
      64) {
        attr_dev(
          canvas,
          "aria-labelledby",
          /*labelledBy*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*describedBy*/
      128) {
        attr_dev(
          canvas,
          "aria-describedby",
          /*describedBy*/
          ctx2[7]
        );
      }
      if (dirty & /*zIndex*/
      4) {
        set_style(
          canvas,
          "z-index",
          /*zIndex*/
          ctx2[2]
        );
      }
      if (dirty & /*pointerEvents*/
      8) {
        set_style(
          canvas,
          "pointer-events",
          /*pointerEvents*/
          ctx2[3] === false ? "none" : null
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "top",
          /*$padding*/
          ctx2[8].top + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "right",
          /*$padding*/
          ctx2[8].right + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "bottom",
          /*$padding*/
          ctx2[8].bottom + "px"
        );
      }
      if (dirty & /*$padding*/
      256) {
        set_style(
          canvas,
          "left",
          /*$padding*/
          ctx2[8].left + "px"
        );
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, element, context*/
        2051)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              get_default_slot_changes6
            ),
            get_default_slot_context6
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(fallback_slot_or_fallback, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(fallback_slot_or_fallback, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(canvas);
        detach_dev(t);
      }
      if (fallback_slot_or_fallback)
        fallback_slot_or_fallback.d(detaching);
      ctx[13](null);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment6.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance6($$self, $$props, $$invalidate) {
  let $padding;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Webgl", slots, ["fallback", "default"]);
  let { element: element2 = void 0 } = $$props;
  let { zIndex = void 0 } = $$props;
  let { pointerEvents = void 0 } = $$props;
  let { contextAttributes = void 0 } = $$props;
  let { context = void 0 } = $$props;
  let { fallback = "" } = $$props;
  let { label = void 0 } = $$props;
  let { labelledBy = void 0 } = $$props;
  let { describedBy = void 0 } = $$props;
  let testGl;
  const { padding } = getContext("LayerCake");
  validate_store(padding, "padding");
  component_subscribe($$self, padding, (value) => $$invalidate(8, $padding = value));
  const cntxt = { gl: writable({}) };
  onMount(() => {
    const contexts = ["webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
    for (let j = 0; j < contexts.length; j++) {
      testGl = element2.getContext(contexts[j], contextAttributes);
      if (testGl) {
        $$invalidate(0, context = testGl);
        break;
      }
    }
  });
  setContext("gl", cntxt);
  const writable_props = [
    "element",
    "zIndex",
    "pointerEvents",
    "contextAttributes",
    "context",
    "fallback",
    "label",
    "labelledBy",
    "describedBy"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Webgl> was created with unknown prop '${key}'`);
  });
  function canvas_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(1, element2);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(1, element2 = $$props2.element);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("contextAttributes" in $$props2)
      $$invalidate(10, contextAttributes = $$props2.contextAttributes);
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
    if ("fallback" in $$props2)
      $$invalidate(4, fallback = $$props2.fallback);
    if ("label" in $$props2)
      $$invalidate(5, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(6, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(7, describedBy = $$props2.describedBy);
    if ("$$scope" in $$props2)
      $$invalidate(11, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    onMount,
    setContext,
    writable,
    element: element2,
    zIndex,
    pointerEvents,
    contextAttributes,
    context,
    fallback,
    label,
    labelledBy,
    describedBy,
    testGl,
    padding,
    cntxt,
    $padding
  });
  $$self.$inject_state = ($$props2) => {
    if ("element" in $$props2)
      $$invalidate(1, element2 = $$props2.element);
    if ("zIndex" in $$props2)
      $$invalidate(2, zIndex = $$props2.zIndex);
    if ("pointerEvents" in $$props2)
      $$invalidate(3, pointerEvents = $$props2.pointerEvents);
    if ("contextAttributes" in $$props2)
      $$invalidate(10, contextAttributes = $$props2.contextAttributes);
    if ("context" in $$props2)
      $$invalidate(0, context = $$props2.context);
    if ("fallback" in $$props2)
      $$invalidate(4, fallback = $$props2.fallback);
    if ("label" in $$props2)
      $$invalidate(5, label = $$props2.label);
    if ("labelledBy" in $$props2)
      $$invalidate(6, labelledBy = $$props2.labelledBy);
    if ("describedBy" in $$props2)
      $$invalidate(7, describedBy = $$props2.describedBy);
    if ("testGl" in $$props2)
      testGl = $$props2.testGl;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*context*/
    1) {
      $:
        cntxt.gl.set(context);
    }
  };
  return [
    context,
    element2,
    zIndex,
    pointerEvents,
    fallback,
    label,
    labelledBy,
    describedBy,
    $padding,
    padding,
    contextAttributes,
    $$scope,
    slots,
    canvas_binding
  ];
}
var Webgl = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance6, create_fragment6, safe_not_equal, {
      element: 1,
      zIndex: 2,
      pointerEvents: 3,
      contextAttributes: 10,
      context: 0,
      fallback: 4,
      label: 5,
      labelledBy: 6,
      describedBy: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Webgl",
      options,
      id: create_fragment6.name
    });
  }
  get element() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get zIndex() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set zIndex(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pointerEvents() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pointerEvents(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get contextAttributes() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set contextAttributes(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get context() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set context(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fallback() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fallback(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get labelledBy() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set labelledBy(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get describedBy() {
    throw new Error("<Webgl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set describedBy(value) {
    throw new Error("<Webgl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Webgl_default = Webgl;

// node_modules/layercake/dist/lib/flatten.js
function flatten(list, accessor = (d) => d) {
  const acc = typeof accessor === "string" ? (d) => d[accessor] : accessor;
  if (Array.isArray(list) && Array.isArray(acc(list[0]))) {
    let flat = [];
    const l = list.length;
    for (let i = 0; i < l; i += 1) {
      flat = flat.concat(acc(list[i]));
    }
    return flat;
  }
  return list;
}

// node_modules/layercake/dist/lib/uniques.js
function uniques(list, accessor, transform = true) {
  if (!Array.isArray(list)) {
    console.error("LayerCake error: Input value to `uniques` must be a list.");
    return null;
  }
  const ll = list.length;
  const iterater = typeof accessor === "function";
  const key = typeof accessor !== "undefined";
  const seen = /* @__PURE__ */ new Set();
  const result = [];
  for (let i = 0; i < ll; i += 1) {
    const d = list[i];
    const computed = iterater ? accessor(d) : key === true ? d[accessor] : d;
    if (!seen.has(computed)) {
      seen.add(computed);
      result.push(transform ? computed : d);
    }
  }
  return result;
}

// node_modules/layercake/dist/lib/raise.js
function raise(el) {
  if (el.nextSibling)
    el.parentNode.appendChild(el);
}

// node_modules/layercake/dist/lib/takeEvery.js
function takeEvery(list, n) {
  if (list.length <= n)
    return list;
  const e = Math.round(list.length / n);
  return list.filter((d, i) => {
    return i % e === 0;
  });
}

// node_modules/layercake/dist/lib/bin.js
function bin2(data, value, {
  domain,
  thresholds
} = {}) {
  if (typeof data !== "object") {
    throw new TypeError("The first argument of bin() must be an array or data object");
  }
  let hist = bin();
  if (value) {
    const acc = typeof value === "function" ? value : (d) => d[value];
    hist = hist.value(acc);
  }
  if (domain) {
    hist = hist.domain(domain);
  }
  if (thresholds) {
    hist = hist.thresholds(thresholds);
  }
  return hist(data);
}

// node_modules/layercake/dist/lib/stack.js
function stack(data, keys, {
  value,
  order,
  offset
} = {}) {
  if (typeof data !== "object") {
    throw new TypeError("The first argument of stack() must be an array or data object");
  }
  if (!Array.isArray(keys)) {
    throw new TypeError("The second argument of stack() must be an array of key names");
  }
  let stacker = stack_default().keys(keys);
  if (value) {
    stacker = stacker.value(value);
  }
  if (order) {
    stacker = stacker.order(order);
  }
  if (offset) {
    stacker = stacker.offset(offset);
  }
  return stacker(data);
}

// node_modules/layercake/dist/lib/groupLonger.js
function groupLonger(data, keys, {
  groupTo = "group",
  valueTo = "value",
  keepKeys = void 0
} = {}) {
  if (!Array.isArray(data)) {
    throw new TypeError("The first argument of groupLonger() must be an array of data");
  }
  if (!Array.isArray(keys)) {
    throw new TypeError("The second argument of groupLonger() must be an array of key names");
  }
  const keysSet = new Set(keys);
  const keep = keepKeys || Object.keys(data[0]).filter((d) => !keysSet.has(d));
  return keys.map((key) => {
    return {
      [groupTo]: key,
      values: data.map((d) => {
        return {
          ...Object.fromEntries(keep.map((k) => [k, d[k]])),
          [valueTo]: d[key],
          [groupTo]: key
        };
      })
    };
  });
}
export {
  Canvas_default as Canvas,
  Html_default as Html,
  LayerCake_default as LayerCake,
  ScaledSvg_default as ScaledSvg,
  Svg_default as Svg,
  Webgl_default as WebGL,
  bin2 as bin,
  calcExtents,
  flatten,
  groupLonger,
  raise,
  scaleCanvas_default as scaleCanvas,
  stack,
  takeEvery,
  uniques
};
//# sourceMappingURL=layercake.js.map
